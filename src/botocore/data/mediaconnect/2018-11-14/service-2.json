{
  "documentation": "API for AWS Elemental MediaConnect",
  "metadata": {
    "apiVersion": "2018-11-14",
    "endpointPrefix": "mediaconnect",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "AWS MediaConnect",
    "serviceId": "MediaConnect",
    "signatureVersion": "v4",
    "signingName": "mediaconnect",
    "uid": "mediaconnect-2018-11-14"
  },
  "operations": {
    "AddFlowOutputs": {
      "documentation": "Adds outputs to an existing flow. You can create up to 50 outputs per flow.",
      "errors": [
        {
          "documentation": "AWS Elemental MediaConnect can't complete this request because this flow already has the maximum number of allowed outputs (50). For more information, contact AWS Customer Support.",
          "shape": "AddFlowOutputs420Exception"
        },
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/{flowArn}/outputs",
        "responseCode": 201
      },
      "input": {
        "shape": "AddFlowOutputsRequest"
      },
      "name": "AddFlowOutputs",
      "output": {
        "documentation": "AWS Elemental MediaConnect added the outputs successfully.",
        "shape": "AddFlowOutputsResponse"
      }
    },
    "AddFlowSources": {
      "documentation": "Adds Sources to flow",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/{flowArn}/source",
        "responseCode": 201
      },
      "input": {
        "shape": "AddFlowSourcesRequest"
      },
      "name": "AddFlowSources",
      "output": {
        "documentation": "AWS Elemental MediaConnect added sources to the flow successfully.",
        "shape": "AddFlowSourcesResponse"
      }
    },
    "AddFlowVpcInterfaces": {
      "documentation": "Adds VPC interfaces to flow",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/{flowArn}/vpcInterfaces",
        "responseCode": 201
      },
      "input": {
        "shape": "AddFlowVpcInterfacesRequest"
      },
      "name": "AddFlowVpcInterfaces",
      "output": {
        "documentation": "The following VPC interface was added to the Flow configuration.",
        "shape": "AddFlowVpcInterfacesResponse"
      }
    },
    "CreateFlow": {
      "documentation": "Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).",
      "errors": [
        {
          "documentation": "Your account already contains the maximum number of 20 flows per account, per Region. For more information, contact AWS Customer Support.",
          "shape": "CreateFlow420Exception"
        },
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows",
        "responseCode": 201
      },
      "input": {
        "shape": "CreateFlowRequest"
      },
      "name": "CreateFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect created the new flow successfully.",
        "shape": "CreateFlowResponse"
      }
    },
    "DeleteFlow": {
      "documentation": "Deletes a flow. Before you can delete a flow, you must stop the flow.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/flows/{flowArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "DeleteFlowRequest"
      },
      "name": "DeleteFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect is deleting the flow.",
        "shape": "DeleteFlowResponse"
      }
    },
    "DescribeFlow": {
      "documentation": "Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/flows/{flowArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribeFlowRequest"
      },
      "name": "DescribeFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect returned the flow details successfully.",
        "shape": "DescribeFlowResponse"
      }
    },
    "GrantFlowEntitlements": {
      "documentation": "Grants entitlements to an existing flow.",
      "errors": [
        {
          "documentation": "AWS Elemental MediaConnect can't complete this request because this flow already has the maximum number of allowed entitlements (50). For more information, contact AWS Customer Support.",
          "shape": "GrantFlowEntitlements420Exception"
        },
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/{flowArn}/entitlements",
        "responseCode": 200
      },
      "input": {
        "shape": "GrantFlowEntitlementsRequest"
      },
      "name": "GrantFlowEntitlements",
      "output": {
        "documentation": "AWS Elemental MediaConnect granted the entitlements successfully.",
        "shape": "GrantFlowEntitlementsResponse"
      }
    },
    "ListEntitlements": {
      "documentation": "Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.",
      "errors": [
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        },
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/entitlements",
        "responseCode": 200
      },
      "input": {
        "shape": "ListEntitlementsRequest"
      },
      "name": "ListEntitlements",
      "output": {
        "documentation": "AWS Elemental MediaConnect returned the list of entitlements successfully.",
        "shape": "ListEntitlementsResponse"
      }
    },
    "ListFlows": {
      "documentation": "Displays a list of flows that are associated with this account. This request returns a paginated result.",
      "errors": [
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        },
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/v1/flows",
        "responseCode": 200
      },
      "input": {
        "shape": "ListFlowsRequest"
      },
      "name": "ListFlows",
      "output": {
        "documentation": "AWS Elemental MediaConnect returned the list of flows successfully.",
        "shape": "ListFlowsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "List all tags on an AWS Elemental MediaConnect resource",
      "errors": [
        {
          "documentation": "The requested resource was not found",
          "shape": "NotFoundException"
        },
        {
          "documentation": "The client performed an invalid request",
          "shape": "BadRequestException"
        },
        {
          "documentation": "Internal service error",
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "documentation": "The tags for the resource",
        "shape": "ListTagsForResourceResponse"
      }
    },
    "RemoveFlowOutput": {
      "documentation": "Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/flows/{flowArn}/outputs/{outputArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "RemoveFlowOutputRequest"
      },
      "name": "RemoveFlowOutput",
      "output": {
        "documentation": "output successfully removed from flow configuration.",
        "shape": "RemoveFlowOutputResponse"
      }
    },
    "RemoveFlowSource": {
      "documentation": "Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/flows/{flowArn}/source/{sourceArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "RemoveFlowSourceRequest"
      },
      "name": "RemoveFlowSource",
      "output": {
        "documentation": "source successfully removed from flow configuration.",
        "shape": "RemoveFlowSourceResponse"
      }
    },
    "RemoveFlowVpcInterface": {
      "documentation": "Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/flows/{flowArn}/vpcInterfaces/{vpcInterfaceName}",
        "responseCode": 200
      },
      "input": {
        "shape": "RemoveFlowVpcInterfaceRequest"
      },
      "name": "RemoveFlowVpcInterface",
      "output": {
        "documentation": "VPC interface successfully removed from flow configuration.",
        "shape": "RemoveFlowVpcInterfaceResponse"
      }
    },
    "RevokeFlowEntitlement": {
      "documentation": "Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "RevokeFlowEntitlementRequest"
      },
      "name": "RevokeFlowEntitlement",
      "output": {
        "documentation": "AWS Elemental MediaConnect revoked the entitlement successfully.",
        "shape": "RevokeFlowEntitlementResponse"
      }
    },
    "StartFlow": {
      "documentation": "Starts a flow.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/start/{flowArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "StartFlowRequest"
      },
      "name": "StartFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect is starting the flow.",
        "shape": "StartFlowResponse"
      }
    },
    "StopFlow": {
      "documentation": "Stops a flow.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/v1/flows/stop/{flowArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "StopFlowRequest"
      },
      "name": "StopFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect is stopping the flow.",
        "shape": "StopFlowResponse"
      }
    },
    "TagResource": {
      "documentation": "Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.",
      "errors": [
        {
          "documentation": "The requested resource was not found",
          "shape": "NotFoundException"
        },
        {
          "documentation": "The client performed an invalid request",
          "shape": "BadRequestException"
        },
        {
          "documentation": "Internal service error",
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource"
    },
    "UntagResource": {
      "documentation": "Deletes specified tags from a resource.",
      "errors": [
        {
          "documentation": "The requested resource was not found",
          "shape": "NotFoundException"
        },
        {
          "documentation": "The client performed an invalid request",
          "shape": "BadRequestException"
        },
        {
          "documentation": "Internal service error",
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource"
    },
    "UpdateFlow": {
      "documentation": "Updates flow",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/v1/flows/{flowArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "UpdateFlowRequest"
      },
      "name": "UpdateFlow",
      "output": {
        "documentation": "AWS Elemental MediaConnect updated the flow successfully.",
        "shape": "UpdateFlowResponse"
      }
    },
    "UpdateFlowEntitlement": {
      "documentation": "You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "UpdateFlowEntitlementRequest"
      },
      "name": "UpdateFlowEntitlement",
      "output": {
        "documentation": "AWS Elemental MediaConnect updated the entitlement successfully.",
        "shape": "UpdateFlowEntitlementResponse"
      }
    },
    "UpdateFlowOutput": {
      "documentation": "Updates an existing flow output.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/v1/flows/{flowArn}/outputs/{outputArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "UpdateFlowOutputRequest"
      },
      "name": "UpdateFlowOutput",
      "output": {
        "documentation": "AWS Elemental MediaConnect updated the output successfully.",
        "shape": "UpdateFlowOutputResponse"
      }
    },
    "UpdateFlowSource": {
      "documentation": "Updates the source of a flow.",
      "errors": [
        {
          "documentation": "The request that you submitted is not valid.",
          "shape": "BadRequestException"
        },
        {
          "documentation": "AWS Elemental MediaConnect can't fulfill your request because it encountered an unexpected condition.",
          "shape": "InternalServerErrorException"
        },
        {
          "documentation": "You don't have the required permissions to perform this operation.",
          "shape": "ForbiddenException"
        },
        {
          "documentation": "AWS Elemental MediaConnect did not find the resource that you specified in the request.",
          "shape": "NotFoundException"
        },
        {
          "documentation": "AWS Elemental MediaConnect is currently unavailable. Try again later.",
          "shape": "ServiceUnavailableException"
        },
        {
          "documentation": "You have exceeded the service request rate limit for your AWS Elemental MediaConnect account.",
          "shape": "TooManyRequestsException"
        }
      ],
      "http": {
        "method": "PUT",
        "requestUri": "/v1/flows/{flowArn}/source/{sourceArn}",
        "responseCode": 202
      },
      "input": {
        "shape": "UpdateFlowSourceRequest"
      },
      "name": "UpdateFlowSource",
      "output": {
        "documentation": "AWS Elemental MediaConnect updated the flow successfully.",
        "shape": "UpdateFlowSourceResponse"
      }
    }
  },
  "shapes": {
    "AddFlowOutputs420Exception": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 420
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "AddFlowOutputsRequest": {
      "documentation": "A request to add outputs to the specified flow.",
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to add outputs to.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Outputs": {
          "documentation": "A list of outputs that you want to add.",
          "locationName": "outputs",
          "shape": "__listOfAddOutputRequest"
        }
      },
      "required": [
        "FlowArn",
        "Outputs"
      ],
      "type": "structure"
    },
    "AddFlowOutputsResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that these outputs were added to.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Outputs": {
          "documentation": "The details of the newly added outputs.",
          "locationName": "outputs",
          "shape": "__listOfOutput"
        }
      },
      "type": "structure"
    },
    "AddFlowSourcesRequest": {
      "documentation": "A request to add sources to the flow.",
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to mutate.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Sources": {
          "documentation": "A list of sources that you want to add.",
          "locationName": "sources",
          "shape": "__listOfSetSourceRequest"
        }
      },
      "required": [
        "FlowArn",
        "Sources"
      ],
      "type": "structure"
    },
    "AddFlowSourcesResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that these sources were added to.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Sources": {
          "documentation": "The details of the newly added sources.",
          "locationName": "sources",
          "shape": "__listOfSource"
        }
      },
      "type": "structure"
    },
    "AddFlowVpcInterfacesRequest": {
      "documentation": "A request to add VPC interfaces to the flow.",
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to mutate.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "VpcInterfaces": {
          "documentation": "A list of VPC interfaces that you want to add.",
          "locationName": "vpcInterfaces",
          "shape": "__listOfVpcInterfaceRequest"
        }
      },
      "required": [
        "FlowArn",
        "VpcInterfaces"
      ],
      "type": "structure"
    },
    "AddFlowVpcInterfacesResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that these VPC interfaces were added to.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "VpcInterfaces": {
          "documentation": "The details of the newly added VPC interfaces.",
          "locationName": "vpcInterfaces",
          "shape": "__listOfVpcInterface"
        }
      },
      "type": "structure"
    },
    "AddOutputRequest": {
      "documentation": "The output that you want to add to this flow.",
      "members": {
        "CidrAllowList": {
          "documentation": "The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "cidrAllowList",
          "shape": "__listOf__string"
        },
        "Description": {
          "documentation": "A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.",
          "locationName": "description",
          "shape": "__string"
        },
        "Destination": {
          "documentation": "The IP address from which video will be sent to output destinations.",
          "locationName": "destination",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
          "locationName": "encryption",
          "shape": "Encryption"
        },
        "MaxLatency": {
          "documentation": "The maximum latency in milliseconds for Zixi-based streams.",
          "locationName": "maxLatency",
          "shape": "__integer"
        },
        "Name": {
          "documentation": "The name of the output. This value must be unique within the current flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "Port": {
          "documentation": "The port to use when content is distributed to this output.",
          "locationName": "port",
          "shape": "__integer"
        },
        "Protocol": {
          "documentation": "The protocol to use for the output.",
          "locationName": "protocol",
          "shape": "Protocol"
        },
        "RemoteId": {
          "documentation": "The remote ID for the Zixi-pull output stream.",
          "locationName": "remoteId",
          "shape": "__string"
        },
        "SmoothingLatency": {
          "documentation": "The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.",
          "locationName": "smoothingLatency",
          "shape": "__integer"
        },
        "StreamId": {
          "documentation": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
          "locationName": "streamId",
          "shape": "__string"
        }
      },
      "required": [
        "Protocol"
      ],
      "type": "structure"
    },
    "Algorithm": {
      "enum": [
        "aes128",
        "aes192",
        "aes256"
      ],
      "type": "string"
    },
    "BadRequestException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "CreateFlow420Exception": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 420
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "CreateFlowRequest": {
      "documentation": "Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).",
      "members": {
        "AvailabilityZone": {
          "documentation": "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.",
          "locationName": "availabilityZone",
          "shape": "__string"
        },
        "Entitlements": {
          "documentation": "The entitlements that you want to grant on a flow.",
          "locationName": "entitlements",
          "shape": "__listOfGrantEntitlementRequest"
        },
        "Name": {
          "documentation": "The name of the flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "Outputs": {
          "documentation": "The outputs that you want to add to this flow.",
          "locationName": "outputs",
          "shape": "__listOfAddOutputRequest"
        },
        "Source": {
          "locationName": "source",
          "shape": "SetSourceRequest"
        },
        "SourceFailoverConfig": {
          "locationName": "sourceFailoverConfig",
          "shape": "FailoverConfig"
        },
        "Sources": {
          "locationName": "sources",
          "shape": "__listOfSetSourceRequest"
        },
        "VpcInterfaces": {
          "documentation": "The VPC interfaces you want on the flow.",
          "locationName": "vpcInterfaces",
          "shape": "__listOfVpcInterfaceRequest"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateFlowResponse": {
      "members": {
        "Flow": {
          "locationName": "flow",
          "shape": "Flow"
        }
      },
      "type": "structure"
    },
    "DeleteFlowRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you want to delete.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn"
      ],
      "type": "structure"
    },
    "DeleteFlowResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that was deleted.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Status": {
          "documentation": "The status of the flow when the DeleteFlow process begins.",
          "locationName": "status",
          "shape": "Status"
        }
      },
      "type": "structure"
    },
    "DescribeFlowRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you want to describe.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn"
      ],
      "type": "structure"
    },
    "DescribeFlowResponse": {
      "members": {
        "Flow": {
          "locationName": "flow",
          "shape": "Flow"
        },
        "Messages": {
          "locationName": "messages",
          "shape": "Messages"
        }
      },
      "type": "structure"
    },
    "Encryption": {
      "documentation": "Information about the encryption of the flow.",
      "members": {
        "Algorithm": {
          "documentation": "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).",
          "locationName": "algorithm",
          "shape": "Algorithm"
        },
        "ConstantInitializationVector": {
          "documentation": "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.",
          "locationName": "constantInitializationVector",
          "shape": "__string"
        },
        "DeviceId": {
          "documentation": "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "deviceId",
          "shape": "__string"
        },
        "KeyType": {
          "documentation": "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
          "locationName": "keyType",
          "shape": "KeyType"
        },
        "Region": {
          "documentation": "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "region",
          "shape": "__string"
        },
        "ResourceId": {
          "documentation": "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "resourceId",
          "shape": "__string"
        },
        "RoleArn": {
          "documentation": "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).",
          "locationName": "roleArn",
          "shape": "__string"
        },
        "SecretArn": {
          "documentation": "The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.",
          "locationName": "secretArn",
          "shape": "__string"
        },
        "Url": {
          "documentation": "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "url",
          "shape": "__string"
        }
      },
      "required": [
        "Algorithm",
        "RoleArn"
      ],
      "type": "structure"
    },
    "Entitlement": {
      "documentation": "The settings for a flow entitlement.",
      "members": {
        "DataTransferSubscriberFeePercent": {
          "documentation": "Percentage from 0-100 of the data transfer cost to be billed to the subscriber.",
          "locationName": "dataTransferSubscriberFeePercent",
          "shape": "__integer"
        },
        "Description": {
          "documentation": "A description of the entitlement.",
          "locationName": "description",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of encryption that will be used on the output that is associated with this entitlement.",
          "locationName": "encryption",
          "shape": "Encryption"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "Name": {
          "documentation": "The name of the entitlement.",
          "locationName": "name",
          "shape": "__string"
        },
        "Subscribers": {
          "documentation": "The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.",
          "locationName": "subscribers",
          "shape": "__listOf__string"
        }
      },
      "required": [
        "EntitlementArn",
        "Subscribers",
        "Name"
      ],
      "type": "structure"
    },
    "FailoverConfig": {
      "documentation": "The settings for source failover",
      "members": {
        "RecoveryWindow": {
          "documentation": "Search window time to look for dash-7 packets",
          "locationName": "recoveryWindow",
          "shape": "__integer"
        },
        "State": {
          "locationName": "state",
          "shape": "State"
        }
      },
      "type": "structure"
    },
    "Flow": {
      "documentation": "The settings for a flow, including its source, outputs, and entitlements.",
      "members": {
        "AvailabilityZone": {
          "documentation": "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.",
          "locationName": "availabilityZone",
          "shape": "__string"
        },
        "Description": {
          "documentation": "A description of the flow. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
          "locationName": "description",
          "shape": "__string"
        },
        "EgressIp": {
          "documentation": "The IP address from which video will be sent to output destinations.",
          "locationName": "egressIp",
          "shape": "__string"
        },
        "Entitlements": {
          "documentation": "The entitlements in this flow.",
          "locationName": "entitlements",
          "shape": "__listOfEntitlement"
        },
        "FlowArn": {
          "documentation": "The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Name": {
          "documentation": "The name of the flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "Outputs": {
          "documentation": "The outputs in this flow.",
          "locationName": "outputs",
          "shape": "__listOfOutput"
        },
        "Source": {
          "locationName": "source",
          "shape": "Source"
        },
        "SourceFailoverConfig": {
          "locationName": "sourceFailoverConfig",
          "shape": "FailoverConfig"
        },
        "Sources": {
          "locationName": "sources",
          "shape": "__listOfSource"
        },
        "Status": {
          "documentation": "The current status of the flow.",
          "locationName": "status",
          "shape": "Status"
        },
        "VpcInterfaces": {
          "documentation": "The VPC Interfaces for this flow.",
          "locationName": "vpcInterfaces",
          "shape": "__listOfVpcInterface"
        }
      },
      "required": [
        "Status",
        "Entitlements",
        "Outputs",
        "AvailabilityZone",
        "FlowArn",
        "Source",
        "Name"
      ],
      "type": "structure"
    },
    "ForbiddenException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 403
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "GrantEntitlementRequest": {
      "documentation": "The entitlements that you want to grant on a flow.",
      "members": {
        "DataTransferSubscriberFeePercent": {
          "documentation": "Percentage from 0-100 of the data transfer cost to be billed to the subscriber.",
          "locationName": "dataTransferSubscriberFeePercent",
          "shape": "__integer"
        },
        "Description": {
          "documentation": "A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.",
          "locationName": "description",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of encryption that will be used on the output that is associated with this entitlement.",
          "locationName": "encryption",
          "shape": "Encryption"
        },
        "Name": {
          "documentation": "The name of the entitlement. This value must be unique within the current flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "Subscribers": {
          "documentation": "The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.",
          "locationName": "subscribers",
          "shape": "__listOf__string"
        }
      },
      "required": [
        "Subscribers"
      ],
      "type": "structure"
    },
    "GrantFlowEntitlements420Exception": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 420
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "GrantFlowEntitlementsRequest": {
      "documentation": "A request to grant entitlements on a flow.",
      "members": {
        "Entitlements": {
          "documentation": "The list of entitlements that you want to grant.",
          "locationName": "entitlements",
          "shape": "__listOfGrantEntitlementRequest"
        },
        "FlowArn": {
          "documentation": "The flow that you want to grant entitlements on.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "Entitlements"
      ],
      "type": "structure"
    },
    "GrantFlowEntitlementsResponse": {
      "members": {
        "Entitlements": {
          "documentation": "The entitlements that were just granted.",
          "locationName": "entitlements",
          "shape": "__listOfEntitlement"
        },
        "FlowArn": {
          "documentation": "The ARN of the flow that these entitlements were granted to.",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "InternalServerErrorException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "KeyType": {
      "enum": [
        "speke",
        "static-key"
      ],
      "type": "string"
    },
    "ListEntitlementsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ListEntitlementsResponse": {
      "members": {
        "Entitlements": {
          "documentation": "A list of entitlements that have been granted to you from other AWS accounts.",
          "locationName": "entitlements",
          "shape": "__listOfListedEntitlement"
        },
        "NextToken": {
          "documentation": "The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.",
          "locationName": "nextToken",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ListFlowsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ListFlowsResponse": {
      "members": {
        "Flows": {
          "documentation": "A list of flow summaries.",
          "locationName": "flows",
          "shape": "__listOfListedFlow"
        },
        "NextToken": {
          "documentation": "The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.",
          "locationName": "nextToken",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "__string"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
          "locationName": "tags",
          "shape": "__mapOf__string"
        }
      },
      "type": "structure"
    },
    "ListedEntitlement": {
      "documentation": "An entitlement that has been granted to you from other AWS accounts.",
      "members": {
        "DataTransferSubscriberFeePercent": {
          "documentation": "Percentage from 0-100 of the data transfer cost to be billed to the subscriber.",
          "locationName": "dataTransferSubscriberFeePercent",
          "shape": "__integer"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "EntitlementName": {
          "documentation": "The name of the entitlement.",
          "locationName": "entitlementName",
          "shape": "__string"
        }
      },
      "required": [
        "EntitlementArn",
        "EntitlementName"
      ],
      "type": "structure"
    },
    "ListedFlow": {
      "documentation": "Provides a summary of a flow, including its ARN, Availability Zone, and source type.",
      "members": {
        "AvailabilityZone": {
          "documentation": "The Availability Zone that the flow was created in.",
          "locationName": "availabilityZone",
          "shape": "__string"
        },
        "Description": {
          "documentation": "A description of the flow.",
          "locationName": "description",
          "shape": "__string"
        },
        "FlowArn": {
          "documentation": "The ARN of the flow.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Name": {
          "documentation": "The name of the flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "SourceType": {
          "documentation": "The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).",
          "locationName": "sourceType",
          "shape": "SourceType"
        },
        "Status": {
          "documentation": "The current status of the flow.",
          "locationName": "status",
          "shape": "Status"
        }
      },
      "required": [
        "Status",
        "Description",
        "SourceType",
        "AvailabilityZone",
        "FlowArn",
        "Name"
      ],
      "type": "structure"
    },
    "MaxResults": {
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "Messages": {
      "documentation": "Messages that provide the state of the flow.",
      "members": {
        "Errors": {
          "documentation": "A list of errors that might have been generated from processes on this flow.",
          "locationName": "errors",
          "shape": "__listOf__string"
        }
      },
      "required": [
        "Errors"
      ],
      "type": "structure"
    },
    "NotFoundException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "Output": {
      "documentation": "The settings for an output.",
      "members": {
        "DataTransferSubscriberFeePercent": {
          "documentation": "Percentage from 0-100 of the data transfer cost to be billed to the subscriber.",
          "locationName": "dataTransferSubscriberFeePercent",
          "shape": "__integer"
        },
        "Description": {
          "documentation": "A description of the output.",
          "locationName": "description",
          "shape": "__string"
        },
        "Destination": {
          "documentation": "The address where you want to send the output.",
          "locationName": "destination",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
          "locationName": "encryption",
          "shape": "Encryption"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "MediaLiveInputArn": {
          "documentation": "The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.",
          "locationName": "mediaLiveInputArn",
          "shape": "__string"
        },
        "Name": {
          "documentation": "The name of the output. This value must be unique within the current flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "OutputArn": {
          "documentation": "The ARN of the output.",
          "locationName": "outputArn",
          "shape": "__string"
        },
        "Port": {
          "documentation": "The port to use when content is distributed to this output.",
          "locationName": "port",
          "shape": "__integer"
        },
        "Transport": {
          "documentation": "Attributes related to the transport stream that are used in the output.",
          "locationName": "transport",
          "shape": "Transport"
        }
      },
      "required": [
        "OutputArn",
        "Name"
      ],
      "type": "structure"
    },
    "Protocol": {
      "enum": [
        "zixi-push",
        "rtp-fec",
        "rtp",
        "zixi-pull",
        "rist"
      ],
      "type": "string"
    },
    "RemoveFlowOutputRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to remove an output from.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "OutputArn": {
          "documentation": "The ARN of the output that you want to remove.",
          "location": "uri",
          "locationName": "outputArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "OutputArn"
      ],
      "type": "structure"
    },
    "RemoveFlowOutputResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that is associated with the output you removed.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "OutputArn": {
          "documentation": "The ARN of the output that was removed.",
          "locationName": "outputArn",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "RemoveFlowSourceRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to remove a source from.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "SourceArn": {
          "documentation": "The ARN of the source that you want to remove.",
          "location": "uri",
          "locationName": "sourceArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "SourceArn"
      ],
      "type": "structure"
    },
    "RemoveFlowSourceResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that is associated with the source you removed.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "SourceArn": {
          "documentation": "The ARN of the source that was removed.",
          "locationName": "sourceArn",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "RemoveFlowVpcInterfaceRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to remove a VPC interface from.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "VpcInterfaceName": {
          "documentation": "The name of the VPC interface that you want to remove.",
          "location": "uri",
          "locationName": "vpcInterfaceName",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "VpcInterfaceName"
      ],
      "type": "structure"
    },
    "RemoveFlowVpcInterfaceResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that is associated with the VPC interface you removed.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "NonDeletedNetworkInterfaceIds": {
          "documentation": "IDs of network interfaces associated with the removed VPC interface that Media Connect was unable to remove.",
          "locationName": "nonDeletedNetworkInterfaceIds",
          "shape": "__listOf__string"
        },
        "VpcInterfaceName": {
          "documentation": "The name of the VPC interface that was removed.",
          "locationName": "vpcInterfaceName",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ResponseError": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "RevokeFlowEntitlementRequest": {
      "members": {
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that you want to revoke.",
          "location": "uri",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "FlowArn": {
          "documentation": "The flow that you want to revoke an entitlement from.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "EntitlementArn"
      ],
      "type": "structure"
    },
    "RevokeFlowEntitlementResponse": {
      "members": {
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that was revoked.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "FlowArn": {
          "documentation": "The ARN of the flow that the entitlement was revoked from.",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "ServiceUnavailableException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 503
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "SetSourceRequest": {
      "documentation": "The settings for the source of the flow.",
      "members": {
        "Decryption": {
          "documentation": "The type of encryption that is used on the content ingested from this source.",
          "locationName": "decryption",
          "shape": "Encryption"
        },
        "Description": {
          "documentation": "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
          "locationName": "description",
          "shape": "__string"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "IngestPort": {
          "documentation": "The port that the flow will be listening on for incoming content.",
          "locationName": "ingestPort",
          "shape": "__integer"
        },
        "MaxBitrate": {
          "documentation": "The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.",
          "locationName": "maxBitrate",
          "shape": "__integer"
        },
        "MaxLatency": {
          "documentation": "The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.",
          "locationName": "maxLatency",
          "shape": "__integer"
        },
        "Name": {
          "documentation": "The name of the source.",
          "locationName": "name",
          "shape": "__string"
        },
        "Protocol": {
          "documentation": "The protocol that is used by the source.",
          "locationName": "protocol",
          "shape": "Protocol"
        },
        "StreamId": {
          "documentation": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
          "locationName": "streamId",
          "shape": "__string"
        },
        "VpcInterfaceName": {
          "documentation": "The name of the VPC interface to use for this source.",
          "locationName": "vpcInterfaceName",
          "shape": "__string"
        },
        "WhitelistCidr": {
          "documentation": "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "whitelistCidr",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "Source": {
      "documentation": "The settings for the source of the flow.",
      "members": {
        "DataTransferSubscriberFeePercent": {
          "documentation": "Percentage from 0-100 of the data transfer cost to be billed to the subscriber.",
          "locationName": "dataTransferSubscriberFeePercent",
          "shape": "__integer"
        },
        "Decryption": {
          "documentation": "The type of encryption that is used on the content ingested from this source.",
          "locationName": "decryption",
          "shape": "Encryption"
        },
        "Description": {
          "documentation": "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
          "locationName": "description",
          "shape": "__string"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "IngestIp": {
          "documentation": "The IP address that the flow will be listening on for incoming content.",
          "locationName": "ingestIp",
          "shape": "__string"
        },
        "IngestPort": {
          "documentation": "The port that the flow will be listening on for incoming content.",
          "locationName": "ingestPort",
          "shape": "__integer"
        },
        "Name": {
          "documentation": "The name of the source.",
          "locationName": "name",
          "shape": "__string"
        },
        "SourceArn": {
          "documentation": "The ARN of the source.",
          "locationName": "sourceArn",
          "shape": "__string"
        },
        "Transport": {
          "documentation": "Attributes related to the transport stream that are used in the source.",
          "locationName": "transport",
          "shape": "Transport"
        },
        "VpcInterfaceName": {
          "documentation": "The name of the VPC Interface this Source is configured with.",
          "locationName": "vpcInterfaceName",
          "shape": "__string"
        },
        "WhitelistCidr": {
          "documentation": "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "whitelistCidr",
          "shape": "__string"
        }
      },
      "required": [
        "SourceArn",
        "Name"
      ],
      "type": "structure"
    },
    "SourceType": {
      "enum": [
        "OWNED",
        "ENTITLED"
      ],
      "type": "string"
    },
    "StartFlowRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you want to start.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn"
      ],
      "type": "structure"
    },
    "StartFlowResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you started.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Status": {
          "documentation": "The status of the flow when the StartFlow process begins.",
          "locationName": "status",
          "shape": "Status"
        }
      },
      "type": "structure"
    },
    "State": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "Status": {
      "enum": [
        "STANDBY",
        "ACTIVE",
        "UPDATING",
        "DELETING",
        "STARTING",
        "STOPPING",
        "ERROR"
      ],
      "type": "string"
    },
    "StopFlowRequest": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you want to stop.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn"
      ],
      "type": "structure"
    },
    "StopFlowResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you stopped.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Status": {
          "documentation": "The status of the flow when the StopFlow process begins.",
          "locationName": "status",
          "shape": "Status"
        }
      },
      "type": "structure"
    },
    "TagResourceRequest": {
      "documentation": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
      "members": {
        "ResourceArn": {
          "documentation": "The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "__string"
        },
        "Tags": {
          "documentation": "A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
          "locationName": "tags",
          "shape": "__mapOf__string"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TooManyRequestsException": {
      "documentation": "Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "The error message returned by AWS Elemental MediaConnect.",
          "locationName": "message",
          "shape": "__string"
        }
      },
      "required": [
        "Message"
      ],
      "type": "structure"
    },
    "Transport": {
      "documentation": "Attributes related to the transport stream that are used in a source or output.",
      "members": {
        "CidrAllowList": {
          "documentation": "The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "cidrAllowList",
          "shape": "__listOf__string"
        },
        "MaxBitrate": {
          "documentation": "The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.",
          "locationName": "maxBitrate",
          "shape": "__integer"
        },
        "MaxLatency": {
          "documentation": "The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.",
          "locationName": "maxLatency",
          "shape": "__integer"
        },
        "Protocol": {
          "documentation": "The protocol that is used by the source or output.",
          "locationName": "protocol",
          "shape": "Protocol"
        },
        "RemoteId": {
          "documentation": "The remote ID for the Zixi-pull stream.",
          "locationName": "remoteId",
          "shape": "__string"
        },
        "SmoothingLatency": {
          "documentation": "The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.",
          "locationName": "smoothingLatency",
          "shape": "__integer"
        },
        "StreamId": {
          "documentation": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
          "locationName": "streamId",
          "shape": "__string"
        }
      },
      "required": [
        "Protocol"
      ],
      "type": "structure"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "__string"
        },
        "TagKeys": {
          "documentation": "The keys of the tags to be removed.",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "__listOf__string"
        }
      },
      "required": [
        "TagKeys",
        "ResourceArn"
      ],
      "type": "structure"
    },
    "UpdateEncryption": {
      "documentation": "Information about the encryption of the flow.",
      "members": {
        "Algorithm": {
          "documentation": "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).",
          "locationName": "algorithm",
          "shape": "Algorithm"
        },
        "ConstantInitializationVector": {
          "documentation": "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.",
          "locationName": "constantInitializationVector",
          "shape": "__string"
        },
        "DeviceId": {
          "documentation": "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "deviceId",
          "shape": "__string"
        },
        "KeyType": {
          "documentation": "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
          "locationName": "keyType",
          "shape": "KeyType"
        },
        "Region": {
          "documentation": "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "region",
          "shape": "__string"
        },
        "ResourceId": {
          "documentation": "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "resourceId",
          "shape": "__string"
        },
        "RoleArn": {
          "documentation": "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).",
          "locationName": "roleArn",
          "shape": "__string"
        },
        "SecretArn": {
          "documentation": "The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.",
          "locationName": "secretArn",
          "shape": "__string"
        },
        "Url": {
          "documentation": "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
          "locationName": "url",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "UpdateFailoverConfig": {
      "documentation": "The settings for source failover",
      "members": {
        "RecoveryWindow": {
          "documentation": "Recovery window time to look for dash-7 packets",
          "locationName": "recoveryWindow",
          "shape": "__integer"
        },
        "State": {
          "locationName": "state",
          "shape": "State"
        }
      },
      "type": "structure"
    },
    "UpdateFlowEntitlementRequest": {
      "documentation": "The entitlement fields that you want to update.",
      "members": {
        "Description": {
          "documentation": "A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.",
          "locationName": "description",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of encryption that will be used on the output associated with this entitlement.",
          "locationName": "encryption",
          "shape": "UpdateEncryption"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that you want to update.",
          "location": "uri",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "FlowArn": {
          "documentation": "The flow that is associated with the entitlement that you want to update.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Subscribers": {
          "documentation": "The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.",
          "locationName": "subscribers",
          "shape": "__listOf__string"
        }
      },
      "required": [
        "FlowArn",
        "EntitlementArn"
      ],
      "type": "structure"
    },
    "UpdateFlowEntitlementResponse": {
      "members": {
        "Entitlement": {
          "locationName": "entitlement",
          "shape": "Entitlement"
        },
        "FlowArn": {
          "documentation": "The ARN of the flow that this entitlement was granted on.",
          "locationName": "flowArn",
          "shape": "__string"
        }
      },
      "type": "structure"
    },
    "UpdateFlowOutputRequest": {
      "documentation": "The fields that you want to update in the output.",
      "members": {
        "CidrAllowList": {
          "documentation": "The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "cidrAllowList",
          "shape": "__listOf__string"
        },
        "Description": {
          "documentation": "A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.",
          "locationName": "description",
          "shape": "__string"
        },
        "Destination": {
          "documentation": "The IP address where you want to send the output.",
          "locationName": "destination",
          "shape": "__string"
        },
        "Encryption": {
          "documentation": "The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
          "locationName": "encryption",
          "shape": "UpdateEncryption"
        },
        "FlowArn": {
          "documentation": "The flow that is associated with the output that you want to update.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "MaxLatency": {
          "documentation": "The maximum latency in milliseconds for Zixi-based streams.",
          "locationName": "maxLatency",
          "shape": "__integer"
        },
        "OutputArn": {
          "documentation": "The ARN of the output that you want to update.",
          "location": "uri",
          "locationName": "outputArn",
          "shape": "__string"
        },
        "Port": {
          "documentation": "The port to use when content is distributed to this output.",
          "locationName": "port",
          "shape": "__integer"
        },
        "Protocol": {
          "documentation": "The protocol to use for the output.",
          "locationName": "protocol",
          "shape": "Protocol"
        },
        "RemoteId": {
          "documentation": "The remote ID for the Zixi-pull stream.",
          "locationName": "remoteId",
          "shape": "__string"
        },
        "SmoothingLatency": {
          "documentation": "The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.",
          "locationName": "smoothingLatency",
          "shape": "__integer"
        },
        "StreamId": {
          "documentation": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
          "locationName": "streamId",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "OutputArn"
      ],
      "type": "structure"
    },
    "UpdateFlowOutputResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that is associated with the updated output.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Output": {
          "locationName": "output",
          "shape": "Output"
        }
      },
      "type": "structure"
    },
    "UpdateFlowRequest": {
      "documentation": "A request to update flow.",
      "members": {
        "FlowArn": {
          "documentation": "The flow that you want to update.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "SourceFailoverConfig": {
          "locationName": "sourceFailoverConfig",
          "shape": "UpdateFailoverConfig"
        }
      },
      "required": [
        "FlowArn"
      ],
      "type": "structure"
    },
    "UpdateFlowResponse": {
      "members": {
        "Flow": {
          "locationName": "flow",
          "shape": "Flow"
        }
      },
      "type": "structure"
    },
    "UpdateFlowSourceRequest": {
      "documentation": "A request to update the source of a flow.",
      "members": {
        "Decryption": {
          "documentation": "The type of encryption used on the content ingested from this source.",
          "locationName": "decryption",
          "shape": "UpdateEncryption"
        },
        "Description": {
          "documentation": "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
          "locationName": "description",
          "shape": "__string"
        },
        "EntitlementArn": {
          "documentation": "The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.",
          "locationName": "entitlementArn",
          "shape": "__string"
        },
        "FlowArn": {
          "documentation": "The flow that is associated with the source that you want to update.",
          "location": "uri",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "IngestPort": {
          "documentation": "The port that the flow will be listening on for incoming content.",
          "locationName": "ingestPort",
          "shape": "__integer"
        },
        "MaxBitrate": {
          "documentation": "The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.",
          "locationName": "maxBitrate",
          "shape": "__integer"
        },
        "MaxLatency": {
          "documentation": "The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.",
          "locationName": "maxLatency",
          "shape": "__integer"
        },
        "Protocol": {
          "documentation": "The protocol that is used by the source.",
          "locationName": "protocol",
          "shape": "Protocol"
        },
        "SourceArn": {
          "documentation": "The ARN of the source that you want to update.",
          "location": "uri",
          "locationName": "sourceArn",
          "shape": "__string"
        },
        "StreamId": {
          "documentation": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
          "locationName": "streamId",
          "shape": "__string"
        },
        "VpcInterfaceName": {
          "documentation": "The name of the VPC Interface to configure this Source with.",
          "locationName": "vpcInterfaceName",
          "shape": "__string"
        },
        "WhitelistCidr": {
          "documentation": "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
          "locationName": "whitelistCidr",
          "shape": "__string"
        }
      },
      "required": [
        "FlowArn",
        "SourceArn"
      ],
      "type": "structure"
    },
    "UpdateFlowSourceResponse": {
      "members": {
        "FlowArn": {
          "documentation": "The ARN of the flow that you want to update.",
          "locationName": "flowArn",
          "shape": "__string"
        },
        "Source": {
          "documentation": "The settings for the source of the flow.",
          "locationName": "source",
          "shape": "Source"
        }
      },
      "type": "structure"
    },
    "VpcInterface": {
      "documentation": "The settings for a VPC Source.",
      "members": {
        "Name": {
          "documentation": "Immutable and has to be a unique against other VpcInterfaces in this Flow",
          "locationName": "name",
          "shape": "__string"
        },
        "NetworkInterfaceIds": {
          "documentation": "IDs of the network interfaces created in customer's account by MediaConnect.",
          "locationName": "networkInterfaceIds",
          "shape": "__listOf__string"
        },
        "RoleArn": {
          "documentation": "Role Arn MediaConnect can assumes to create ENIs in customer's account",
          "locationName": "roleArn",
          "shape": "__string"
        },
        "SecurityGroupIds": {
          "documentation": "Security Group IDs to be used on ENI.",
          "locationName": "securityGroupIds",
          "shape": "__listOf__string"
        },
        "SubnetId": {
          "documentation": "Subnet must be in the AZ of the Flow",
          "locationName": "subnetId",
          "shape": "__string"
        }
      },
      "required": [
        "NetworkInterfaceIds",
        "SubnetId",
        "SecurityGroupIds",
        "RoleArn",
        "Name"
      ],
      "type": "structure"
    },
    "VpcInterfaceRequest": {
      "documentation": "Desired VPC Interface for a Flow",
      "members": {
        "Name": {
          "documentation": "The name of the VPC Interface. This value must be unique within the current flow.",
          "locationName": "name",
          "shape": "__string"
        },
        "RoleArn": {
          "documentation": "Role Arn MediaConnect can assumes to create ENIs in customer's account",
          "locationName": "roleArn",
          "shape": "__string"
        },
        "SecurityGroupIds": {
          "documentation": "Security Group IDs to be used on ENI.",
          "locationName": "securityGroupIds",
          "shape": "__listOf__string"
        },
        "SubnetId": {
          "documentation": "Subnet must be in the AZ of the Flow",
          "locationName": "subnetId",
          "shape": "__string"
        }
      },
      "required": [
        "SubnetId",
        "SecurityGroupIds",
        "RoleArn",
        "Name"
      ],
      "type": "structure"
    },
    "__boolean": {
      "type": "boolean"
    },
    "__double": {
      "type": "double"
    },
    "__integer": {
      "type": "integer"
    },
    "__listOfAddOutputRequest": {
      "member": {
        "shape": "AddOutputRequest"
      },
      "type": "list"
    },
    "__listOfEntitlement": {
      "member": {
        "shape": "Entitlement"
      },
      "type": "list"
    },
    "__listOfGrantEntitlementRequest": {
      "member": {
        "shape": "GrantEntitlementRequest"
      },
      "type": "list"
    },
    "__listOfListedEntitlement": {
      "member": {
        "shape": "ListedEntitlement"
      },
      "type": "list"
    },
    "__listOfListedFlow": {
      "member": {
        "shape": "ListedFlow"
      },
      "type": "list"
    },
    "__listOfOutput": {
      "member": {
        "shape": "Output"
      },
      "type": "list"
    },
    "__listOfSetSourceRequest": {
      "member": {
        "shape": "SetSourceRequest"
      },
      "type": "list"
    },
    "__listOfSource": {
      "member": {
        "shape": "Source"
      },
      "type": "list"
    },
    "__listOfVpcInterface": {
      "member": {
        "shape": "VpcInterface"
      },
      "type": "list"
    },
    "__listOfVpcInterfaceRequest": {
      "member": {
        "shape": "VpcInterfaceRequest"
      },
      "type": "list"
    },
    "__listOf__integer": {
      "member": {
        "shape": "__integer"
      },
      "type": "list"
    },
    "__listOf__string": {
      "member": {
        "shape": "__string"
      },
      "type": "list"
    },
    "__long": {
      "type": "long"
    },
    "__mapOf__string": {
      "key": {
        "shape": "__string"
      },
      "type": "map",
      "value": {
        "shape": "__string"
      }
    },
    "__string": {
      "type": "string"
    },
    "__timestampIso8601": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "__timestampUnix": {
      "timestampFormat": "unixTimestamp",
      "type": "timestamp"
    }
  }
}
