{
  "documentation": "<p>Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following data sources: VPC Flow Logs, AWS CloudTrail event logs, and DNS logs. It uses threat intelligence feeds, such as lists of malicious IPs and domains, and machine learning to identify unexpected and potentially unauthorized and malicious activity within your AWS environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, URLs, or domains. For example, GuardDuty can detect compromised EC2 instances serving malware or mining bitcoin. It also monitors AWS account access behavior for signs of compromise, such as unauthorized infrastructure deployments, like instances deployed in a region that has never been used, or unusual API calls, like a password policy change to reduce password strength. GuardDuty informs you of the status of your AWS environment by producing security findings that you can view in the GuardDuty console or through Amazon CloudWatch events. For more information, see <a href=\"https://docs.aws.amazon.com/guardduty/latest/ug/what-is-guardduty.html\">Amazon GuardDuty User Guide</a>. </p>",
  "metadata": {
    "apiVersion": "2017-11-28",
    "endpointPrefix": "guardduty",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceFullName": "Amazon GuardDuty",
    "serviceId": "GuardDuty",
    "signatureVersion": "v4",
    "signingName": "guardduty",
    "uid": "guardduty-2017-11-28"
  },
  "operations": {
    "AcceptInvitation": {
      "documentation": "<p>Accepts the invitation to be monitored by a master GuardDuty account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/master",
        "responseCode": 200
      },
      "input": {
        "shape": "AcceptInvitationRequest"
      },
      "name": "AcceptInvitation",
      "output": {
        "shape": "AcceptInvitationResponse"
      }
    },
    "ArchiveFindings": {
      "documentation": "<p>Archives GuardDuty findings specified by the list of finding IDs.</p> <note> <p>Only the master account can archive findings. Member accounts do not have permission to archive findings from their accounts.</p> </note>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/archive",
        "responseCode": 200
      },
      "input": {
        "shape": "ArchiveFindingsRequest"
      },
      "name": "ArchiveFindings",
      "output": {
        "shape": "ArchiveFindingsResponse"
      }
    },
    "CreateDetector": {
      "documentation": "<p>Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each region that you enable the service. You can have only one detector per account per region.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateDetectorRequest"
      },
      "name": "CreateDetector",
      "output": {
        "shape": "CreateDetectorResponse"
      }
    },
    "CreateFilter": {
      "documentation": "<p>Creates a filter using the specified finding criteria.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/filter",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateFilterRequest"
      },
      "name": "CreateFilter",
      "output": {
        "shape": "CreateFilterResponse"
      }
    },
    "CreateIPSet": {
      "documentation": "<p>Creates a new IPSet, called Trusted IP list in the consoler user interface. An IPSet is a list IP addresses trusted for secure communication with AWS infrastructure and applications. GuardDuty does not generate findings for IP addresses included in IPSets. Only users from the master account can use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/ipset",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateIPSetRequest"
      },
      "name": "CreateIPSet",
      "output": {
        "shape": "CreateIPSetResponse"
      }
    },
    "CreateMembers": {
      "documentation": "<p>Creates member accounts of the current AWS account by specifying a list of AWS account IDs. The current AWS account can then invite these members to manage GuardDuty in their accounts.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateMembersRequest"
      },
      "name": "CreateMembers",
      "output": {
        "shape": "CreateMembersResponse"
      }
    },
    "CreatePublishingDestination": {
      "documentation": "<p>Creates a publishing destination to send findings to. The resource to send findings to must exist before you use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/publishingDestination",
        "responseCode": 200
      },
      "input": {
        "shape": "CreatePublishingDestinationRequest"
      },
      "name": "CreatePublishingDestination",
      "output": {
        "shape": "CreatePublishingDestinationResponse"
      }
    },
    "CreateSampleFindings": {
      "documentation": "<p>Generates example findings of types specified by the list of finding types. If 'NULL' is specified for <code>findingTypes</code>, the API generates example findings of all supported finding types.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/create",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateSampleFindingsRequest"
      },
      "name": "CreateSampleFindings",
      "output": {
        "shape": "CreateSampleFindingsResponse"
      }
    },
    "CreateThreatIntelSet": {
      "documentation": "<p>Create a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the master account can use this operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/threatintelset",
        "responseCode": 200
      },
      "input": {
        "shape": "CreateThreatIntelSetRequest"
      },
      "name": "CreateThreatIntelSet",
      "output": {
        "shape": "CreateThreatIntelSetResponse"
      }
    },
    "DeclineInvitations": {
      "documentation": "<p>Declines invitations sent to the current member account by AWS account specified by their account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/invitation/decline",
        "responseCode": 200
      },
      "input": {
        "shape": "DeclineInvitationsRequest"
      },
      "name": "DeclineInvitations",
      "output": {
        "shape": "DeclineInvitationsResponse"
      }
    },
    "DeleteDetector": {
      "documentation": "<p>Deletes a Amazon GuardDuty detector specified by the detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteDetectorRequest"
      },
      "name": "DeleteDetector",
      "output": {
        "shape": "DeleteDetectorResponse"
      }
    },
    "DeleteFilter": {
      "documentation": "<p>Deletes the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteFilterRequest"
      },
      "name": "DeleteFilter",
      "output": {
        "shape": "DeleteFilterResponse"
      }
    },
    "DeleteIPSet": {
      "documentation": "<p>Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called Trusted IP lists in the console user interface.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteIPSetRequest"
      },
      "name": "DeleteIPSet",
      "output": {
        "shape": "DeleteIPSetResponse"
      }
    },
    "DeleteInvitations": {
      "documentation": "<p>Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/invitation/delete",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteInvitationsRequest"
      },
      "name": "DeleteInvitations",
      "output": {
        "shape": "DeleteInvitationsResponse"
      }
    },
    "DeleteMembers": {
      "documentation": "<p>Deletes GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/delete",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteMembersRequest"
      },
      "name": "DeleteMembers",
      "output": {
        "shape": "DeleteMembersResponse"
      }
    },
    "DeletePublishingDestination": {
      "documentation": "<p>Deletes the publishing definition with the specified <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeletePublishingDestinationRequest"
      },
      "name": "DeletePublishingDestination",
      "output": {
        "shape": "DeletePublishingDestinationResponse"
      }
    },
    "DeleteThreatIntelSet": {
      "documentation": "<p>Deletes ThreatIntelSet specified by the ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DeleteThreatIntelSetRequest"
      },
      "name": "DeleteThreatIntelSet",
      "output": {
        "shape": "DeleteThreatIntelSetResponse"
      }
    },
    "DescribePublishingDestination": {
      "documentation": "<p>Returns information about the publishing destination specified by the provided <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "DescribePublishingDestinationRequest"
      },
      "name": "DescribePublishingDestination",
      "output": {
        "shape": "DescribePublishingDestinationResponse"
      }
    },
    "DisassociateFromMasterAccount": {
      "documentation": "<p>Disassociates the current GuardDuty member account from its master account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/master/disassociate",
        "responseCode": 200
      },
      "input": {
        "shape": "DisassociateFromMasterAccountRequest"
      },
      "name": "DisassociateFromMasterAccount",
      "output": {
        "shape": "DisassociateFromMasterAccountResponse"
      }
    },
    "DisassociateMembers": {
      "documentation": "<p>Disassociates GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/disassociate",
        "responseCode": 200
      },
      "input": {
        "shape": "DisassociateMembersRequest"
      },
      "name": "DisassociateMembers",
      "output": {
        "shape": "DisassociateMembersResponse"
      }
    },
    "GetDetector": {
      "documentation": "<p>Retrieves an Amazon GuardDuty detector specified by the detectorId.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetDetectorRequest"
      },
      "name": "GetDetector",
      "output": {
        "shape": "GetDetectorResponse"
      }
    },
    "GetFilter": {
      "documentation": "<p>Returns the details of the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFilterRequest"
      },
      "name": "GetFilter",
      "output": {
        "shape": "GetFilterResponse"
      }
    },
    "GetFindings": {
      "documentation": "<p>Describes Amazon GuardDuty findings specified by finding IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/get",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFindingsRequest"
      },
      "name": "GetFindings",
      "output": {
        "shape": "GetFindingsResponse"
      }
    },
    "GetFindingsStatistics": {
      "documentation": "<p>Lists Amazon GuardDuty findings' statistics for the specified detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/statistics",
        "responseCode": 200
      },
      "input": {
        "shape": "GetFindingsStatisticsRequest"
      },
      "name": "GetFindingsStatistics",
      "output": {
        "shape": "GetFindingsStatisticsResponse"
      }
    },
    "GetIPSet": {
      "documentation": "<p>Retrieves the IPSet specified by the <code>ipSetId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetIPSetRequest"
      },
      "name": "GetIPSet",
      "output": {
        "shape": "GetIPSetResponse"
      }
    },
    "GetInvitationsCount": {
      "documentation": "<p>Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/invitation/count",
        "responseCode": 200
      },
      "input": {
        "shape": "GetInvitationsCountRequest"
      },
      "name": "GetInvitationsCount",
      "output": {
        "shape": "GetInvitationsCountResponse"
      }
    },
    "GetMasterAccount": {
      "documentation": "<p>Provides the details for the GuardDuty master account associated with the current GuardDuty member account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/master",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMasterAccountRequest"
      },
      "name": "GetMasterAccount",
      "output": {
        "shape": "GetMasterAccountResponse"
      }
    },
    "GetMembers": {
      "documentation": "<p>Retrieves GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/get",
        "responseCode": 200
      },
      "input": {
        "shape": "GetMembersRequest"
      },
      "name": "GetMembers",
      "output": {
        "shape": "GetMembersResponse"
      }
    },
    "GetThreatIntelSet": {
      "documentation": "<p>Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "GetThreatIntelSetRequest"
      },
      "name": "GetThreatIntelSet",
      "output": {
        "shape": "GetThreatIntelSetResponse"
      }
    },
    "InviteMembers": {
      "documentation": "<p>Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty and allow the current AWS account to view and manage these accounts' GuardDuty findings on their behalf as the master account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/invite",
        "responseCode": 200
      },
      "input": {
        "shape": "InviteMembersRequest"
      },
      "name": "InviteMembers",
      "output": {
        "shape": "InviteMembersResponse"
      }
    },
    "ListDetectors": {
      "documentation": "<p>Lists detectorIds of all the existing Amazon GuardDuty detector resources.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector",
        "responseCode": 200
      },
      "input": {
        "shape": "ListDetectorsRequest"
      },
      "name": "ListDetectors",
      "output": {
        "shape": "ListDetectorsResponse"
      }
    },
    "ListFilters": {
      "documentation": "<p>Returns a paginated list of the current filters.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/filter",
        "responseCode": 200
      },
      "input": {
        "shape": "ListFiltersRequest"
      },
      "name": "ListFilters",
      "output": {
        "shape": "ListFiltersResponse"
      }
    },
    "ListFindings": {
      "documentation": "<p>Lists Amazon GuardDuty findings for the specified detector ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings",
        "responseCode": 200
      },
      "input": {
        "shape": "ListFindingsRequest"
      },
      "name": "ListFindings",
      "output": {
        "shape": "ListFindingsResponse"
      }
    },
    "ListIPSets": {
      "documentation": "<p>Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated master account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/ipset",
        "responseCode": 200
      },
      "input": {
        "shape": "ListIPSetsRequest"
      },
      "name": "ListIPSets",
      "output": {
        "shape": "ListIPSetsResponse"
      }
    },
    "ListInvitations": {
      "documentation": "<p>Lists all GuardDuty membership invitations that were sent to the current AWS account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/invitation",
        "responseCode": 200
      },
      "input": {
        "shape": "ListInvitationsRequest"
      },
      "name": "ListInvitations",
      "output": {
        "shape": "ListInvitationsResponse"
      }
    },
    "ListMembers": {
      "documentation": "<p>Lists details about all member accounts for the current GuardDuty master account.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/member",
        "responseCode": 200
      },
      "input": {
        "shape": "ListMembersRequest"
      },
      "name": "ListMembers",
      "output": {
        "shape": "ListMembersResponse"
      }
    },
    "ListPublishingDestinations": {
      "documentation": "<p>Returns a list of publishing destinations associated with the specified <code>dectectorId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/publishingDestination",
        "responseCode": 200
      },
      "input": {
        "shape": "ListPublishingDestinationsRequest"
      },
      "name": "ListPublishingDestinations",
      "output": {
        "shape": "ListPublishingDestinationsResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and Threat Intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource..</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 200
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "ListThreatIntelSets": {
      "documentation": "<p>Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the master account are returned.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/detector/{detectorId}/threatintelset",
        "responseCode": 200
      },
      "input": {
        "shape": "ListThreatIntelSetsRequest"
      },
      "name": "ListThreatIntelSets",
      "output": {
        "shape": "ListThreatIntelSetsResponse"
      }
    },
    "StartMonitoringMembers": {
      "documentation": "<p>Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <code>StopMonitoringMembers</code> operation.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/start",
        "responseCode": 200
      },
      "input": {
        "shape": "StartMonitoringMembersRequest"
      },
      "name": "StartMonitoringMembers",
      "output": {
        "shape": "StartMonitoringMembersResponse"
      }
    },
    "StopMonitoringMembers": {
      "documentation": "<p>Stops GuardDuty monitoring for the specified member accounnts. Use the <code>StartMonitoringMembers</code> to restart monitoring for those accounts.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/member/stop",
        "responseCode": 200
      },
      "input": {
        "shape": "StopMonitoringMembersRequest"
      },
      "name": "StopMonitoringMembers",
      "output": {
        "shape": "StopMonitoringMembersResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds tags to a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UnarchiveFindings": {
      "documentation": "<p>Unarchives GuardDuty findings specified by the <code>findingIds</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/unarchive",
        "responseCode": 200
      },
      "input": {
        "shape": "UnarchiveFindingsRequest"
      },
      "name": "UnarchiveFindings",
      "output": {
        "shape": "UnarchiveFindingsResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes tags from a resource.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}",
        "responseCode": 204
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateDetector": {
      "documentation": "<p>Updates the Amazon GuardDuty detector specified by the detectorId.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateDetectorRequest"
      },
      "name": "UpdateDetector",
      "output": {
        "shape": "UpdateDetectorResponse"
      }
    },
    "UpdateFilter": {
      "documentation": "<p>Updates the filter specified by the filter name.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/filter/{filterName}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateFilterRequest"
      },
      "name": "UpdateFilter",
      "output": {
        "shape": "UpdateFilterResponse"
      }
    },
    "UpdateFindingsFeedback": {
      "documentation": "<p>Marks the specified GuardDuty findings as useful or not useful.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/findings/feedback",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateFindingsFeedbackRequest"
      },
      "name": "UpdateFindingsFeedback",
      "output": {
        "shape": "UpdateFindingsFeedbackResponse"
      }
    },
    "UpdateIPSet": {
      "documentation": "<p>Updates the IPSet specified by the IPSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/ipset/{ipSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateIPSetRequest"
      },
      "name": "UpdateIPSet",
      "output": {
        "shape": "UpdateIPSetResponse"
      }
    },
    "UpdatePublishingDestination": {
      "documentation": "<p>Updates information about the publishing destination specified by the <code>destinationId</code>.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/publishingDestination/{destinationId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdatePublishingDestinationRequest"
      },
      "name": "UpdatePublishingDestination",
      "output": {
        "shape": "UpdatePublishingDestinationResponse"
      }
    },
    "UpdateThreatIntelSet": {
      "documentation": "<p>Updates the ThreatIntelSet specified by ThreatIntelSet ID.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InternalServerErrorException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
        "responseCode": 200
      },
      "input": {
        "shape": "UpdateThreatIntelSetRequest"
      },
      "name": "UpdateThreatIntelSet",
      "output": {
        "shape": "UpdateThreatIntelSetResponse"
      }
    }
  },
  "shapes": {
    "AcceptInvitationRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "InvitationId": {
          "documentation": "<p>This value is used to validate the master account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "MasterId": {
          "documentation": "<p>The account ID of the master GuardDuty account whose invitation you're accepting.</p>",
          "locationName": "masterId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "MasterId",
        "InvitationId"
      ],
      "type": "structure"
    },
    "AcceptInvitationResponse": {
      "members": {},
      "type": "structure"
    },
    "AccessKeyDetails": {
      "documentation": "<p>Contains information about the access keys.</p>",
      "members": {
        "AccessKeyId": {
          "documentation": "<p>Access key ID of the user.</p>",
          "locationName": "accessKeyId",
          "shape": "String"
        },
        "PrincipalId": {
          "documentation": "<p>The principal ID of the user.</p>",
          "locationName": "principalId",
          "shape": "String"
        },
        "UserName": {
          "documentation": "<p>The name of the user.</p>",
          "locationName": "userName",
          "shape": "String"
        },
        "UserType": {
          "documentation": "<p>The type of the user.</p>",
          "locationName": "userType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "AccountDetail": {
      "documentation": "<p>Contains information about the account.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>Member account ID.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "Email": {
          "documentation": "<p>Member account's email address.</p>",
          "locationName": "email",
          "shape": "Email"
        }
      },
      "required": [
        "AccountId",
        "Email"
      ],
      "type": "structure"
    },
    "AccountDetails": {
      "max": 50,
      "member": {
        "shape": "AccountDetail"
      },
      "min": 1,
      "type": "list"
    },
    "AccountId": {
      "max": 12,
      "min": 12,
      "type": "string"
    },
    "AccountIds": {
      "max": 50,
      "member": {
        "shape": "AccountId"
      },
      "min": 1,
      "type": "list"
    },
    "Action": {
      "documentation": "<p>Contains information about action.</p>",
      "members": {
        "ActionType": {
          "documentation": "<p>GuardDuty Finding activity type.</p>",
          "locationName": "actionType",
          "shape": "String"
        },
        "AwsApiCallAction": {
          "documentation": "<p>Information about the AWS_API_CALL action described in this finding.</p>",
          "locationName": "awsApiCallAction",
          "shape": "AwsApiCallAction"
        },
        "DnsRequestAction": {
          "documentation": "<p>Information about the DNS_REQUEST action described in this finding.</p>",
          "locationName": "dnsRequestAction",
          "shape": "DnsRequestAction"
        },
        "NetworkConnectionAction": {
          "documentation": "<p>Information about the NETWORK_CONNECTION action described in this finding.</p>",
          "locationName": "networkConnectionAction",
          "shape": "NetworkConnectionAction"
        },
        "PortProbeAction": {
          "documentation": "<p>Information about the PORT_PROBE action described in this finding.</p>",
          "locationName": "portProbeAction",
          "shape": "PortProbeAction"
        }
      },
      "type": "structure"
    },
    "ArchiveFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to archive.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>IDs of the findings that you want to archive.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "ArchiveFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "AwsApiCallAction": {
      "documentation": "<p>Contains information about the API operation.</p>",
      "members": {
        "Api": {
          "documentation": "<p>AWS API name.</p>",
          "locationName": "api",
          "shape": "String"
        },
        "CallerType": {
          "documentation": "<p>AWS API caller type.</p>",
          "locationName": "callerType",
          "shape": "String"
        },
        "DomainDetails": {
          "documentation": "<p>Domain information for the AWS API call.</p>",
          "locationName": "domainDetails",
          "shape": "DomainDetails"
        },
        "RemoteIpDetails": {
          "documentation": "<p>Remote IP information of the connection.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        },
        "ServiceName": {
          "documentation": "<p>AWS service name whose API was invoked.</p>",
          "locationName": "serviceName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "BadRequestException": {
      "documentation": "<p>Bad request exception object.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>The error message.</p>",
          "locationName": "message",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The error type.</p>",
          "locationName": "__type",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Boolean": {
      "type": "boolean"
    },
    "City": {
      "documentation": "<p>Contains information about the city associated with the IP address.</p>",
      "members": {
        "CityName": {
          "documentation": "<p>City name of the remote IP address.</p>",
          "locationName": "cityName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ClientToken": {
      "max": 64,
      "min": 0,
      "type": "string"
    },
    "Condition": {
      "documentation": "<p>Contains information about the condition.</p>",
      "members": {
        "Eq": {
          "deprecated": true,
          "documentation": "<p>Represents the equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "eq",
          "shape": "Eq"
        },
        "Equals": {
          "documentation": "<p>Represents an <b>equal</b> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "equals",
          "shape": "Equals"
        },
        "GreaterThan": {
          "documentation": "<p>Represents a greater than condition to be applied to a single field when querying for findings.</p>",
          "locationName": "greaterThan",
          "shape": "Long"
        },
        "GreaterThanOrEqual": {
          "documentation": "<p>Represents a greater than equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "greaterThanOrEqual",
          "shape": "Long"
        },
        "Gt": {
          "deprecated": true,
          "documentation": "<p>Represents a greater than condition to be applied to a single field when querying for findings.</p>",
          "locationName": "gt",
          "shape": "Integer"
        },
        "Gte": {
          "deprecated": true,
          "documentation": "<p>Represents a greater than equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "gte",
          "shape": "Integer"
        },
        "LessThan": {
          "documentation": "<p>Represents a less than condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lessThan",
          "shape": "Long"
        },
        "LessThanOrEqual": {
          "documentation": "<p>Represents a less than equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lessThanOrEqual",
          "shape": "Long"
        },
        "Lt": {
          "deprecated": true,
          "documentation": "<p>Represents a less than condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lt",
          "shape": "Integer"
        },
        "Lte": {
          "deprecated": true,
          "documentation": "<p>Represents a less than equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "lte",
          "shape": "Integer"
        },
        "Neq": {
          "deprecated": true,
          "documentation": "<p>Represents the not equal condition to be applied to a single field when querying for findings.</p>",
          "locationName": "neq",
          "shape": "Neq"
        },
        "NotEquals": {
          "documentation": "<p>Represents an <b>not equal</b> condition to be applied to a single field when querying for findings.</p>",
          "locationName": "notEquals",
          "shape": "NotEquals"
        }
      },
      "type": "structure"
    },
    "CountBySeverity": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "Integer"
      }
    },
    "Country": {
      "documentation": "<p>Contains information about the country in which the remote IP address is located.</p>",
      "members": {
        "CountryCode": {
          "documentation": "<p>Country code of the remote IP address.</p>",
          "locationName": "countryCode",
          "shape": "String"
        },
        "CountryName": {
          "documentation": "<p>Country name of the remote IP address.</p>",
          "locationName": "countryName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "CreateDetectorRequest": {
      "members": {
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "Enable": {
          "documentation": "<p>A boolean value that specifies whether the detector is to be enabled.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>A enum value that specifies how frequently customer got Finding updates published.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new detector resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Enable"
      ],
      "type": "structure"
    },
    "CreateDetectorResponse": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the created detector.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "type": "structure"
    },
    "CreateFilterRequest": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account for which you want to create a filter.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new filter resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "FindingCriteria"
      ],
      "type": "structure"
    },
    "CreateFilterResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the successfully created filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "CreateIPSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>A boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account for which you want to create an IPSet.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Format": {
          "documentation": "<p>The format of the file that contains the IPSet.</p>",
          "locationName": "format",
          "shape": "IpSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new IP set resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "Format",
        "Location",
        "Activate"
      ],
      "type": "structure"
    },
    "CreateIPSetResponse": {
      "members": {
        "IpSetId": {
          "documentation": "<p>The ID of the IPSet resource.</p>",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "IpSetId"
      ],
      "type": "structure"
    },
    "CreateMembersRequest": {
      "members": {
        "AccountDetails": {
          "documentation": "<p>A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.</p>",
          "locationName": "accountDetails",
          "shape": "AccountDetails"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account with which you want to associate member accounts.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountDetails"
      ],
      "type": "structure"
    },
    "CreateMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "CreatePublishingDestinationRequest": {
      "members": {
        "ClientToken": {
          "documentation": "<p>The idempotency token for the request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DestinationProperties": {
          "documentation": "<p>Properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DestinationType": {
          "documentation": "<p>The type of resource for the publishing destination. Currently only S3 is supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the GuardDuty detector associated with the publishing destination.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationType",
        "DestinationProperties"
      ],
      "type": "structure"
    },
    "CreatePublishingDestinationResponse": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination created.</p>",
          "locationName": "destinationId",
          "shape": "String"
        }
      },
      "required": [
        "DestinationId"
      ],
      "type": "structure"
    },
    "CreateSampleFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector to create sample findings for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingTypes": {
          "documentation": "<p>Types of sample findings to generate.</p>",
          "locationName": "findingTypes",
          "shape": "FindingTypes"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "CreateSampleFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "CreateThreatIntelSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>A boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "ClientToken": {
          "documentation": "<p>The idempotency token for the create request.</p>",
          "idempotencyToken": true,
          "locationName": "clientToken",
          "shape": "ClientToken"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account for which you want to create a threatIntelSet.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Format": {
          "documentation": "<p>The format of the file that contains the ThreatIntelSet.</p>",
          "locationName": "format",
          "shape": "ThreatIntelSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a new Threat List resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "DetectorId",
        "Name",
        "Format",
        "Location",
        "Activate"
      ],
      "type": "structure"
    },
    "CreateThreatIntelSetResponse": {
      "members": {
        "ThreatIntelSetId": {
          "documentation": "<p>The ID of the ThreatIntelSet resource.</p>",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "Criterion": {
      "key": {
        "shape": "String"
      },
      "type": "map",
      "value": {
        "shape": "Condition"
      }
    },
    "DeclineInvitationsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        }
      },
      "required": [
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeclineInvitationsResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DeleteDetectorRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that you want to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DeleteDetectorResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteFilterRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter you want to delete.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "DeleteFilterResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteIPSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the IPSet.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID of the IPSet to delete.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "DeleteIPSetResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteInvitationsRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        }
      },
      "required": [
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeleteInvitationsResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DeleteMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to delete.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "DeleteMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>The accounts that could not be processed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DeletePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination to delete.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the publishing destination to delete.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "DeletePublishingDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "DeleteThreatIntelSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID of the threatIntelSet you want to delete.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "DeleteThreatIntelSetResponse": {
      "members": {},
      "type": "structure"
    },
    "DescribePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination to retrieve.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector associated with the publishing destination to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "DescribePublishingDestinationResponse": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the publishing destination.</p>",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationProperties": {
          "documentation": "<p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DestinationType": {
          "documentation": "<p>The type of the publishing destination. Currently, only S3 is supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "PublishingFailureStartTimestamp": {
          "documentation": "<p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>",
          "locationName": "publishingFailureStartTimestamp",
          "shape": "Long"
        },
        "Status": {
          "documentation": "<p>The status of the publishing destination.</p>",
          "locationName": "status",
          "shape": "PublishingStatus"
        }
      },
      "required": [
        "DestinationId",
        "DestinationType",
        "Status",
        "PublishingFailureStartTimestamp",
        "DestinationProperties"
      ],
      "type": "structure"
    },
    "Destination": {
      "documentation": "<p>Contains information about a publishing destination, including the ID, type, and status.</p>",
      "members": {
        "DestinationId": {
          "documentation": "<p>The unique ID of the publishing destination.</p>",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationType": {
          "documentation": "<p>The type of resource used for the publishing destination. Currently, only S3 is supported.</p>",
          "locationName": "destinationType",
          "shape": "DestinationType"
        },
        "Status": {
          "documentation": "<p>The status of the publishing destination.</p>",
          "locationName": "status",
          "shape": "PublishingStatus"
        }
      },
      "required": [
        "DestinationId",
        "DestinationType",
        "Status"
      ],
      "type": "structure"
    },
    "DestinationProperties": {
      "documentation": "<p>Contains the ARN of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.</p>",
      "members": {
        "DestinationArn": {
          "documentation": "<p>The ARN of the resource to publish to.</p>",
          "locationName": "destinationArn",
          "shape": "String"
        },
        "KmsKeyArn": {
          "documentation": "<p>The ARN of the KMS key to use for encryption.</p>",
          "locationName": "kmsKeyArn",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DestinationType": {
      "enum": [
        "S3"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Destinations": {
      "member": {
        "shape": "Destination"
      },
      "type": "list"
    },
    "DetectorId": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "DetectorIds": {
      "max": 50,
      "member": {
        "shape": "DetectorId"
      },
      "min": 0,
      "type": "list"
    },
    "DetectorStatus": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "DisassociateFromMasterAccountRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "DisassociateFromMasterAccountResponse": {
      "members": {},
      "type": "structure"
    },
    "DisassociateMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to disassociate from master.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to disassociate from master.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "DisassociateMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "DnsRequestAction": {
      "documentation": "<p>Contains information about the DNS_REQUEST action described in this finding.</p>",
      "members": {
        "Domain": {
          "documentation": "<p>Domain information for the API request.</p>",
          "locationName": "domain",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "DomainDetails": {
      "documentation": "<p>Contains information about the domain.</p>",
      "members": {
        "Domain": {
          "documentation": "<p>Domain information for the AWS API call.</p>",
          "locationName": "domain",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Double": {
      "type": "double"
    },
    "Email": {
      "max": 64,
      "min": 1,
      "type": "string"
    },
    "Eq": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Equals": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "Evidence": {
      "documentation": "<p>Contains information about the reason that the finding was generated.</p>",
      "members": {
        "ThreatIntelligenceDetails": {
          "documentation": "<p>A list of threat intelligence details related to the evidence.</p>",
          "locationName": "threatIntelligenceDetails",
          "shape": "ThreatIntelligenceDetails"
        }
      },
      "type": "structure"
    },
    "Feedback": {
      "enum": [
        "USEFUL",
        "NOT_USEFUL"
      ],
      "type": "string"
    },
    "FilterAction": {
      "enum": [
        "NOOP",
        "ARCHIVE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "FilterDescription": {
      "max": 512,
      "min": 0,
      "type": "string"
    },
    "FilterName": {
      "max": 64,
      "min": 3,
      "type": "string"
    },
    "FilterNames": {
      "max": 50,
      "member": {
        "shape": "FilterName"
      },
      "min": 0,
      "type": "list"
    },
    "FilterRank": {
      "max": 100,
      "min": 1,
      "type": "integer"
    },
    "Finding": {
      "documentation": "<p>Contains information about the finding, which is generated when abnormal or suspicious activity is detected.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account in which the finding was generated.</p>",
          "locationName": "accountId",
          "shape": "String"
        },
        "Arn": {
          "documentation": "<p>The ARN for the finding.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Confidence": {
          "documentation": "<p>The confidence score for the finding.</p>",
          "locationName": "confidence",
          "shape": "Double"
        },
        "CreatedAt": {
          "documentation": "<p>The time and date at which the finding was created.</p>",
          "locationName": "createdAt",
          "shape": "String"
        },
        "Description": {
          "documentation": "<p>The description of the finding.</p>",
          "locationName": "description",
          "shape": "String"
        },
        "Id": {
          "documentation": "<p>The ID of the finding.</p>",
          "locationName": "id",
          "shape": "String"
        },
        "Partition": {
          "documentation": "<p>The partition associated with the finding.</p>",
          "locationName": "partition",
          "shape": "String"
        },
        "Region": {
          "documentation": "<p>The Region in which the finding was generated.</p>",
          "locationName": "region",
          "shape": "String"
        },
        "Resource": {
          "locationName": "resource",
          "shape": "Resource"
        },
        "SchemaVersion": {
          "documentation": "<p>The version of the schema used for the finding.</p>",
          "locationName": "schemaVersion",
          "shape": "String"
        },
        "Service": {
          "locationName": "service",
          "shape": "Service"
        },
        "Severity": {
          "documentation": "<p>The severity of the finding.</p>",
          "locationName": "severity",
          "shape": "Double"
        },
        "Title": {
          "documentation": "<p>The title for the finding.</p>",
          "locationName": "title",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The type of the finding.</p>",
          "locationName": "type",
          "shape": "FindingType"
        },
        "UpdatedAt": {
          "documentation": "<p>The time and date at which the finding was laste updated.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "Arn",
        "CreatedAt",
        "Id",
        "Region",
        "Resource",
        "SchemaVersion",
        "Severity",
        "Type",
        "UpdatedAt"
      ],
      "type": "structure"
    },
    "FindingCriteria": {
      "documentation": "<p>Contains information about the criteria used for querying findings.</p>",
      "members": {
        "Criterion": {
          "documentation": "<p>Represents a map of finding properties that match specified conditions and values when querying findings.</p>",
          "locationName": "criterion",
          "shape": "Criterion"
        }
      },
      "type": "structure"
    },
    "FindingId": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "FindingIds": {
      "max": 50,
      "member": {
        "shape": "FindingId"
      },
      "min": 0,
      "type": "list"
    },
    "FindingPublishingFrequency": {
      "enum": [
        "FIFTEEN_MINUTES",
        "ONE_HOUR",
        "SIX_HOURS"
      ],
      "type": "string"
    },
    "FindingStatisticType": {
      "enum": [
        "COUNT_BY_SEVERITY"
      ],
      "type": "string"
    },
    "FindingStatisticTypes": {
      "max": 10,
      "member": {
        "shape": "FindingStatisticType"
      },
      "min": 0,
      "type": "list"
    },
    "FindingStatistics": {
      "documentation": "<p>Contains information about finding statistics.</p>",
      "members": {
        "CountBySeverity": {
          "documentation": "<p>Represents a map of severity to count statistic for a set of findings</p>",
          "locationName": "countBySeverity",
          "shape": "CountBySeverity"
        }
      },
      "type": "structure"
    },
    "FindingType": {
      "max": 50,
      "min": 1,
      "type": "string"
    },
    "FindingTypes": {
      "max": 50,
      "member": {
        "shape": "FindingType"
      },
      "min": 0,
      "type": "list"
    },
    "Findings": {
      "max": 50,
      "member": {
        "shape": "Finding"
      },
      "min": 0,
      "type": "list"
    },
    "GeoLocation": {
      "documentation": "<p>Contains information about the location of the remote IP address.</p>",
      "members": {
        "Lat": {
          "documentation": "<p>Latitude information of remote IP address.</p>",
          "locationName": "lat",
          "shape": "Double"
        },
        "Lon": {
          "documentation": "<p>Longitude information of remote IP address.</p>",
          "locationName": "lon",
          "shape": "Double"
        }
      },
      "type": "structure"
    },
    "GetDetectorRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that you want to get.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetDetectorResponse": {
      "members": {
        "CreatedAt": {
          "documentation": "<p>Detector creation timestamp.</p>",
          "locationName": "createdAt",
          "shape": "String"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>Finding publishing frequency.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        },
        "ServiceRole": {
          "documentation": "<p>The GuardDuty service role.</p>",
          "locationName": "serviceRole",
          "shape": "String"
        },
        "Status": {
          "documentation": "<p>The detector status.</p>",
          "locationName": "status",
          "shape": "DetectorStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the detector resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        },
        "UpdatedAt": {
          "documentation": "<p>Detector last update timestamp.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "ServiceRole",
        "Status"
      ],
      "type": "structure"
    },
    "GetFilterRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter you want to get.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "GetFilterResponse": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Name": {
          "documentation": "<p>The name of the filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        },
        "Tags": {
          "documentation": "<p>The tags of the filter resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Action",
        "FindingCriteria"
      ],
      "type": "structure"
    },
    "GetFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>IDs of the findings that you want to retrieve.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        },
        "SortCriteria": {
          "documentation": "<p>Represents the criteria used for sorting findings.</p>",
          "locationName": "sortCriteria",
          "shape": "SortCriteria"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "GetFindingsResponse": {
      "members": {
        "Findings": {
          "documentation": "<p>A list of findings.</p>",
          "locationName": "findings",
          "shape": "Findings"
        }
      },
      "required": [
        "Findings"
      ],
      "type": "structure"
    },
    "GetFindingsStatisticsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria used for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "FindingStatisticTypes": {
          "documentation": "<p>Types of finding statistics to retrieve.</p>",
          "locationName": "findingStatisticTypes",
          "shape": "FindingStatisticTypes"
        }
      },
      "required": [
        "DetectorId",
        "FindingStatisticTypes"
      ],
      "type": "structure"
    },
    "GetFindingsStatisticsResponse": {
      "members": {
        "FindingStatistics": {
          "documentation": "<p>Finding statistics object.</p>",
          "locationName": "findingStatistics",
          "shape": "FindingStatistics"
        }
      },
      "required": [
        "FindingStatistics"
      ],
      "type": "structure"
    },
    "GetIPSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the ipSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID of the IPSet to retrieve.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "GetIPSetResponse": {
      "members": {
        "Format": {
          "documentation": "<p>The format of the file that contains the IPSet.</p>",
          "locationName": "format",
          "shape": "IpSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The user friendly name for the IPSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Status": {
          "documentation": "<p>The status of ipSet file uploaded.</p>",
          "locationName": "status",
          "shape": "IpSetStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the IP set resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Format",
        "Location",
        "Status"
      ],
      "type": "structure"
    },
    "GetInvitationsCountRequest": {
      "members": {},
      "type": "structure"
    },
    "GetInvitationsCountResponse": {
      "members": {
        "InvitationsCount": {
          "documentation": "<p>The number of received invitations.</p>",
          "locationName": "invitationsCount",
          "shape": "Integer"
        }
      },
      "type": "structure"
    },
    "GetMasterAccountRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty member account.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "GetMasterAccountResponse": {
      "members": {
        "Master": {
          "documentation": "<p>Master account details.</p>",
          "locationName": "master",
          "shape": "Master"
        }
      },
      "required": [
        "Master"
      ],
      "type": "structure"
    },
    "GetMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts that you want to describe.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account whose members you want to retrieve.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "GetMembersResponse": {
      "members": {
        "Members": {
          "documentation": "<p>A list of members.</p>",
          "locationName": "members",
          "shape": "Members"
        },
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "Members",
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "GetThreatIntelSetRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID of the threatIntelSet you want to get.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "GetThreatIntelSetResponse": {
      "members": {
        "Format": {
          "documentation": "<p>The format of the threatIntelSet.</p>",
          "locationName": "format",
          "shape": "ThreatIntelSetFormat"
        },
        "Location": {
          "documentation": "<p>The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "Status": {
          "documentation": "<p>The status of threatIntelSet file uploaded.</p>",
          "locationName": "status",
          "shape": "ThreatIntelSetStatus"
        },
        "Tags": {
          "documentation": "<p>The tags of the Threat List resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "Name",
        "Format",
        "Location",
        "Status"
      ],
      "type": "structure"
    },
    "GuardDutyArn": {
      "pattern": "^arn:[A-Za-z_.-]{1,20}:guardduty:[A-Za-z0-9_/.-]{0,63}:\\d+:detector/[A-Za-z0-9_/.-]{32,264}$",
      "type": "string"
    },
    "IamInstanceProfile": {
      "documentation": "<p>Contains information about the EC2 instance profile.</p>",
      "members": {
        "Arn": {
          "documentation": "<p>AWS EC2 instance profile ARN.</p>",
          "locationName": "arn",
          "shape": "String"
        },
        "Id": {
          "documentation": "<p>AWS EC2 instance profile ID.</p>",
          "locationName": "id",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "InstanceDetails": {
      "documentation": "<p>Contains information about the details of an instance.</p>",
      "members": {
        "AvailabilityZone": {
          "documentation": "<p>The availability zone of the EC2 instance.</p>",
          "locationName": "availabilityZone",
          "shape": "String"
        },
        "IamInstanceProfile": {
          "documentation": "<p>The profile information of the EC2 instance.</p>",
          "locationName": "iamInstanceProfile",
          "shape": "IamInstanceProfile"
        },
        "ImageDescription": {
          "documentation": "<p>The image description of the EC2 instance.</p>",
          "locationName": "imageDescription",
          "shape": "String"
        },
        "ImageId": {
          "documentation": "<p>The image ID of the EC2 instance.</p>",
          "locationName": "imageId",
          "shape": "String"
        },
        "InstanceId": {
          "documentation": "<p>The ID of the EC2 instance.</p>",
          "locationName": "instanceId",
          "shape": "String"
        },
        "InstanceState": {
          "documentation": "<p>The state of the EC2 instance.</p>",
          "locationName": "instanceState",
          "shape": "String"
        },
        "InstanceType": {
          "documentation": "<p>The type of the EC2 instance.</p>",
          "locationName": "instanceType",
          "shape": "String"
        },
        "LaunchTime": {
          "documentation": "<p>The launch time of the EC2 instance.</p>",
          "locationName": "launchTime",
          "shape": "String"
        },
        "NetworkInterfaces": {
          "documentation": "<p>The network interface information of the EC2 instance.</p>",
          "locationName": "networkInterfaces",
          "shape": "NetworkInterfaces"
        },
        "OutpostArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the AWS Outpost. Only applicable to AWS Outposts instances.</p>",
          "locationName": "outpostArn",
          "shape": "String"
        },
        "Platform": {
          "documentation": "<p>The platform of the EC2 instance.</p>",
          "locationName": "platform",
          "shape": "String"
        },
        "ProductCodes": {
          "documentation": "<p>The product code of the EC2 instance.</p>",
          "locationName": "productCodes",
          "shape": "ProductCodes"
        },
        "Tags": {
          "documentation": "<p>The tags of the EC2 instance.</p>",
          "locationName": "tags",
          "shape": "Tags"
        }
      },
      "type": "structure"
    },
    "Integer": {
      "type": "integer"
    },
    "InternalServerErrorException": {
      "documentation": "<p>Internal server error exception object.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Message": {
          "documentation": "<p>The error message.</p>",
          "locationName": "message",
          "shape": "String"
        },
        "Type": {
          "documentation": "<p>The error type.</p>",
          "locationName": "__type",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Invitation": {
      "documentation": "<p>Contains information about the invitation to become a member account.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account from which the invitations was sent.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "InvitationId": {
          "documentation": "<p>The ID of the invitation. This value is used to validate the inviter account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "InvitedAt": {
          "documentation": "<p>Timestamp at which the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the inviter and invitee accounts.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Invitations": {
      "max": 50,
      "member": {
        "shape": "Invitation"
      },
      "min": 0,
      "type": "list"
    },
    "InviteMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the accounts that you want to invite to GuardDuty as members.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account with which you want to invite members.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "DisableEmailNotification": {
          "documentation": "<p>A boolean value that specifies whether you want to disable email notification to the accounts that you\u2019re inviting to GuardDuty as members.</p>",
          "locationName": "disableEmailNotification",
          "shape": "Boolean"
        },
        "Message": {
          "documentation": "<p>The invitation message that you want to send to the accounts that you\u2019re inviting to GuardDuty as members.</p>",
          "locationName": "message",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "InviteMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "IpSetFormat": {
      "enum": [
        "TXT",
        "STIX",
        "OTX_CSV",
        "ALIEN_VAULT",
        "PROOF_POINT",
        "FIRE_EYE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "IpSetIds": {
      "max": 50,
      "member": {
        "shape": "String"
      },
      "min": 0,
      "type": "list"
    },
    "IpSetStatus": {
      "enum": [
        "INACTIVE",
        "ACTIVATING",
        "ACTIVE",
        "DEACTIVATING",
        "ERROR",
        "DELETE_PENDING",
        "DELETED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Ipv6Addresses": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "ListDetectorsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListDetectorsResponse": {
      "members": {
        "DetectorIds": {
          "documentation": "<p>A list of detector Ids.</p>",
          "locationName": "detectorIds",
          "shape": "DetectorIds"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorIds"
      ],
      "type": "structure"
    },
    "ListFiltersRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the filter is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListFiltersResponse": {
      "members": {
        "FilterNames": {
          "documentation": "<p>A list of filter names</p>",
          "locationName": "filterNames",
          "shape": "FilterNames"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "FilterNames"
      ],
      "type": "structure"
    },
    "ListFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector that specifies the GuardDuty service whose findings you want to list.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria used for querying findings. Valid values include:</p> <ul> <li> <p>JSON field name</p> </li> <li> <p>accountId</p> </li> <li> <p>region</p> </li> <li> <p>confidence</p> </li> <li> <p>id</p> </li> <li> <p>resource.accessKeyDetails.accessKeyId</p> </li> <li> <p>resource.accessKeyDetails.principalId</p> </li> <li> <p>resource.accessKeyDetails.userName</p> </li> <li> <p>resource.accessKeyDetails.userType</p> </li> <li> <p>resource.instanceDetails.iamInstanceProfile.id</p> </li> <li> <p>resource.instanceDetails.imageId</p> </li> <li> <p>resource.instanceDetails.instanceId</p> </li> <li> <p>resource.instanceDetails.outpostArn</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicDnsName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.publicIp</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.subnetId</p> </li> <li> <p>resource.instanceDetails.networkInterfaces.vpcId</p> </li> <li> <p>resource.instanceDetails.tags.key</p> </li> <li> <p>resource.instanceDetails.tags.value</p> </li> <li> <p>resource.resourceType</p> </li> <li> <p>service.action.actionType</p> </li> <li> <p>service.action.awsApiCallAction.api</p> </li> <li> <p>service.action.awsApiCallAction.callerType</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.awsApiCallAction.serviceName</p> </li> <li> <p>service.action.dnsRequestAction.domain</p> </li> <li> <p>service.action.networkConnectionAction.blocked</p> </li> <li> <p>service.action.networkConnectionAction.connectionDirection</p> </li> <li> <p>service.action.networkConnectionAction.localPortDetails.port</p> </li> <li> <p>service.action.networkConnectionAction.protocol</p> </li> <li> <p>service.action.networkConnectionAction.localIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.city.cityName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p> </li> <li> <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p> </li> <li> <p>service.action.networkConnectionAction.remotePortDetails.port</p> </li> <li> <p>service.additionalInfo.threatListName</p> </li> <li> <p>service.archived</p> <p>When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p> </li> <li> <p>service.resourceRole</p> </li> <li> <p>severity</p> </li> <li> <p>type</p> </li> <li> <p>updatedAt</p> <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p> </li> </ul>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "SortCriteria": {
          "documentation": "<p>Represents the criteria used for sorting findings.</p>",
          "locationName": "sortCriteria",
          "shape": "SortCriteria"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListFindingsResponse": {
      "members": {
        "FindingIds": {
          "documentation": "<p>The IDs of the findings you are listing.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "FindingIds"
      ],
      "type": "structure"
    },
    "ListIPSetsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the ipSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListIPSetsResponse": {
      "members": {
        "IpSetIds": {
          "documentation": "<p>The IDs of the IPSet resources.</p>",
          "locationName": "ipSetIds",
          "shape": "IpSetIds"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "IpSetIds"
      ],
      "type": "structure"
    },
    "ListInvitationsRequest": {
      "members": {
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListInvitationsResponse": {
      "members": {
        "Invitations": {
          "documentation": "<p>A list of invitation descriptions.</p>",
          "locationName": "invitations",
          "shape": "Invitations"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListMembersRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the member is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        },
        "OnlyAssociated": {
          "documentation": "<p>Specifies whether to only return associated members or to return all members (including members which haven't been invited yet or have been disassociated).</p>",
          "location": "querystring",
          "locationName": "onlyAssociated",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListMembersResponse": {
      "members": {
        "Members": {
          "documentation": "<p>A list of members.</p>",
          "locationName": "members",
          "shape": "Members"
        },
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListPublishingDestinationsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector to retrieve publishing destinations for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>The maximum number of results to return in the response.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results returned in the repsonse. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListPublishingDestinationsResponse": {
      "members": {
        "Destinations": {
          "documentation": "<p>A <code>Destinations</code> obect that includes information about each publishing destination returned.</p>",
          "locationName": "destinations",
          "shape": "Destinations"
        },
        "NextToken": {
          "documentation": "<p>A token to use for paginating results returned in the repsonse. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "Destinations"
      ],
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the given GuardDuty resource </p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>The tags associated with the resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "ListThreatIntelSetsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector the threatIntelSet is associated with.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "MaxResults": {
          "documentation": "<p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>",
          "location": "querystring",
          "locationName": "maxResults",
          "shape": "MaxResults"
        },
        "NextToken": {
          "documentation": "<p>You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>",
          "location": "querystring",
          "locationName": "nextToken",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "ListThreatIntelSetsResponse": {
      "members": {
        "NextToken": {
          "documentation": "<p>Pagination parameter to be used on the next list operation to retrieve more items.</p>",
          "locationName": "nextToken",
          "shape": "String"
        },
        "ThreatIntelSetIds": {
          "documentation": "<p>The IDs of the ThreatIntelSet resources.</p>",
          "locationName": "threatIntelSetIds",
          "shape": "ThreatIntelSetIds"
        }
      },
      "required": [
        "ThreatIntelSetIds"
      ],
      "type": "structure"
    },
    "LocalIpDetails": {
      "documentation": "<p>Contains information about the local IP address of the connection.</p>",
      "members": {
        "IpAddressV4": {
          "documentation": "<p>IPV4 remote address of the connection.</p>",
          "locationName": "ipAddressV4",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "LocalPortDetails": {
      "documentation": "<p>Contains information about the port for the local connection.</p>",
      "members": {
        "Port": {
          "documentation": "<p>Port number of the local connection.</p>",
          "locationName": "port",
          "shape": "Integer"
        },
        "PortName": {
          "documentation": "<p>Port name of the local connection.</p>",
          "locationName": "portName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Location": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Long": {
      "type": "long"
    },
    "Master": {
      "documentation": "<p>Contains information about the Master account and invitation.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>The ID of the account used as the Master account.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "InvitationId": {
          "documentation": "<p>This value is used to validate the master account to the member account.</p>",
          "locationName": "invitationId",
          "shape": "String"
        },
        "InvitedAt": {
          "documentation": "<p>Timestamp at which the invitation was sent.</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the master and member accounts.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "MaxResults": {
      "max": 50,
      "min": 1,
      "type": "integer"
    },
    "Member": {
      "documentation": "<p>Continas information about the member account </p>",
      "members": {
        "AccountId": {
          "documentation": "<p>Member account ID.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "DetectorId": {
          "documentation": "<p>Member account's detector ID.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Email": {
          "documentation": "<p>Member account's email address.</p>",
          "locationName": "email",
          "shape": "Email"
        },
        "InvitedAt": {
          "documentation": "<p>Timestamp at which the invitation was sent</p>",
          "locationName": "invitedAt",
          "shape": "String"
        },
        "MasterId": {
          "documentation": "<p>Master account ID.</p>",
          "locationName": "masterId",
          "shape": "String"
        },
        "RelationshipStatus": {
          "documentation": "<p>The status of the relationship between the member and the master.</p>",
          "locationName": "relationshipStatus",
          "shape": "String"
        },
        "UpdatedAt": {
          "documentation": "<p>Member last updated timestamp.</p>",
          "locationName": "updatedAt",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "MasterId",
        "Email",
        "RelationshipStatus",
        "UpdatedAt"
      ],
      "type": "structure"
    },
    "Members": {
      "max": 50,
      "member": {
        "shape": "Member"
      },
      "min": 0,
      "type": "list"
    },
    "Name": {
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "Neq": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "NetworkConnectionAction": {
      "documentation": "<p>Contains information about the NETWORK_CONNECTION action described in the finding.</p>",
      "members": {
        "Blocked": {
          "documentation": "<p>Network connection blocked information.</p>",
          "locationName": "blocked",
          "shape": "Boolean"
        },
        "ConnectionDirection": {
          "documentation": "<p>Network connection direction.</p>",
          "locationName": "connectionDirection",
          "shape": "String"
        },
        "LocalIpDetails": {
          "documentation": "<p>Local IP information of the connection.</p>",
          "locationName": "localIpDetails",
          "shape": "LocalIpDetails"
        },
        "LocalPortDetails": {
          "documentation": "<p>Local port information of the connection.</p>",
          "locationName": "localPortDetails",
          "shape": "LocalPortDetails"
        },
        "Protocol": {
          "documentation": "<p>Network connection protocol.</p>",
          "locationName": "protocol",
          "shape": "String"
        },
        "RemoteIpDetails": {
          "documentation": "<p>Remote IP information of the connection.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        },
        "RemotePortDetails": {
          "documentation": "<p>Remote port information of the connection.</p>",
          "locationName": "remotePortDetails",
          "shape": "RemotePortDetails"
        }
      },
      "type": "structure"
    },
    "NetworkInterface": {
      "documentation": "<p>Contains information about the network interface of the Ec2 instance.</p>",
      "members": {
        "Ipv6Addresses": {
          "documentation": "<p>A list of EC2 instance IPv6 address information.</p>",
          "locationName": "ipv6Addresses",
          "shape": "Ipv6Addresses"
        },
        "NetworkInterfaceId": {
          "documentation": "<p>The ID of the network interface</p>",
          "locationName": "networkInterfaceId",
          "shape": "String"
        },
        "PrivateDnsName": {
          "documentation": "<p>Private DNS name of the EC2 instance.</p>",
          "locationName": "privateDnsName",
          "shape": "String"
        },
        "PrivateIpAddress": {
          "documentation": "<p>Private IP address of the EC2 instance.</p>",
          "locationName": "privateIpAddress",
          "shape": "String"
        },
        "PrivateIpAddresses": {
          "documentation": "<p>Other private IP address information of the EC2 instance.</p>",
          "locationName": "privateIpAddresses",
          "shape": "PrivateIpAddresses"
        },
        "PublicDnsName": {
          "documentation": "<p>Public DNS name of the EC2 instance.</p>",
          "locationName": "publicDnsName",
          "shape": "String"
        },
        "PublicIp": {
          "documentation": "<p>Public IP address of the EC2 instance.</p>",
          "locationName": "publicIp",
          "shape": "String"
        },
        "SecurityGroups": {
          "documentation": "<p>Security groups associated with the EC2 instance.</p>",
          "locationName": "securityGroups",
          "shape": "SecurityGroups"
        },
        "SubnetId": {
          "documentation": "<p>The subnet ID of the EC2 instance.</p>",
          "locationName": "subnetId",
          "shape": "String"
        },
        "VpcId": {
          "documentation": "<p>The VPC ID of the EC2 instance.</p>",
          "locationName": "vpcId",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "NetworkInterfaces": {
      "member": {
        "shape": "NetworkInterface"
      },
      "type": "list"
    },
    "NotEquals": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "OrderBy": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "Organization": {
      "documentation": "<p>Continas information about the ISP organization of the remote IP address.</p>",
      "members": {
        "Asn": {
          "documentation": "<p>Autonomous system number of the internet provider of the remote IP address.</p>",
          "locationName": "asn",
          "shape": "String"
        },
        "AsnOrg": {
          "documentation": "<p>Organization that registered this ASN.</p>",
          "locationName": "asnOrg",
          "shape": "String"
        },
        "Isp": {
          "documentation": "<p>ISP information for the internet provider.</p>",
          "locationName": "isp",
          "shape": "String"
        },
        "Org": {
          "documentation": "<p>Name of the internet provider.</p>",
          "locationName": "org",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "PortProbeAction": {
      "documentation": "<p>Contains information about the PORT_PROBE action described in the finding.</p>",
      "members": {
        "Blocked": {
          "documentation": "<p>Port probe blocked information.</p>",
          "locationName": "blocked",
          "shape": "Boolean"
        },
        "PortProbeDetails": {
          "documentation": "<p>A list of port probe details objects.</p>",
          "locationName": "portProbeDetails",
          "shape": "PortProbeDetails"
        }
      },
      "type": "structure"
    },
    "PortProbeDetail": {
      "documentation": "<p>Contains information about the port probe details.</p>",
      "members": {
        "LocalIpDetails": {
          "documentation": "<p>Local IP information of the connection.</p>",
          "locationName": "localIpDetails",
          "shape": "LocalIpDetails"
        },
        "LocalPortDetails": {
          "documentation": "<p>Local port information of the connection.</p>",
          "locationName": "localPortDetails",
          "shape": "LocalPortDetails"
        },
        "RemoteIpDetails": {
          "documentation": "<p>Remote IP information of the connection.</p>",
          "locationName": "remoteIpDetails",
          "shape": "RemoteIpDetails"
        }
      },
      "type": "structure"
    },
    "PortProbeDetails": {
      "member": {
        "shape": "PortProbeDetail"
      },
      "type": "list"
    },
    "PrivateIpAddressDetails": {
      "documentation": "<p>Contains other private IP address information of the EC2 instance.</p>",
      "members": {
        "PrivateDnsName": {
          "documentation": "<p>Private DNS name of the EC2 instance.</p>",
          "locationName": "privateDnsName",
          "shape": "String"
        },
        "PrivateIpAddress": {
          "documentation": "<p>Private IP address of the EC2 instance.</p>",
          "locationName": "privateIpAddress",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "PrivateIpAddresses": {
      "member": {
        "shape": "PrivateIpAddressDetails"
      },
      "type": "list"
    },
    "ProductCode": {
      "documentation": "<p>Contains information about the product code for the Ec2 instance.</p>",
      "members": {
        "Code": {
          "documentation": "<p>Product code information.</p>",
          "locationName": "code",
          "shape": "String"
        },
        "ProductType": {
          "documentation": "<p>Product code type.</p>",
          "locationName": "productType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ProductCodes": {
      "member": {
        "shape": "ProductCode"
      },
      "type": "list"
    },
    "PublishingStatus": {
      "enum": [
        "PENDING_VERIFICATION",
        "PUBLISHING",
        "UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY",
        "STOPPED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "RemoteIpDetails": {
      "documentation": "<p>Continas information about the remote IP address of the connection.</p>",
      "members": {
        "City": {
          "documentation": "<p>City information of the remote IP address.</p>",
          "locationName": "city",
          "shape": "City"
        },
        "Country": {
          "documentation": "<p>Country code of the remote IP address.</p>",
          "locationName": "country",
          "shape": "Country"
        },
        "GeoLocation": {
          "documentation": "<p>Location information of the remote IP address.</p>",
          "locationName": "geoLocation",
          "shape": "GeoLocation"
        },
        "IpAddressV4": {
          "documentation": "<p>IPV4 remote address of the connection.</p>",
          "locationName": "ipAddressV4",
          "shape": "String"
        },
        "Organization": {
          "documentation": "<p>ISP Organization information of the remote IP address.</p>",
          "locationName": "organization",
          "shape": "Organization"
        }
      },
      "type": "structure"
    },
    "RemotePortDetails": {
      "documentation": "<p>Contains information about the remote port.</p>",
      "members": {
        "Port": {
          "documentation": "<p>Port number of the remote connection.</p>",
          "locationName": "port",
          "shape": "Integer"
        },
        "PortName": {
          "documentation": "<p>Port name of the remote connection.</p>",
          "locationName": "portName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "Resource": {
      "documentation": "<p>Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.</p>",
      "members": {
        "AccessKeyDetails": {
          "documentation": "<p>The IAM access key details (IAM user information) of a user that engaged in the activity that prompted GuardDuty to generate a finding.</p>",
          "locationName": "accessKeyDetails",
          "shape": "AccessKeyDetails"
        },
        "InstanceDetails": {
          "documentation": "<p>The information about the EC2 instance associated with the activity that prompted GuardDuty to generate a finding.</p>",
          "locationName": "instanceDetails",
          "shape": "InstanceDetails"
        },
        "ResourceType": {
          "documentation": "<p>The type of the AWS resource.</p>",
          "locationName": "resourceType",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SecurityGroup": {
      "documentation": "<p>Contains information about the security groups associated with the EC2 instance.</p>",
      "members": {
        "GroupId": {
          "documentation": "<p>EC2 instance's security group ID.</p>",
          "locationName": "groupId",
          "shape": "String"
        },
        "GroupName": {
          "documentation": "<p>EC2 instance's security group name.</p>",
          "locationName": "groupName",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SecurityGroups": {
      "member": {
        "shape": "SecurityGroup"
      },
      "type": "list"
    },
    "Service": {
      "documentation": "<p>Contains additional information about the generated finding.</p>",
      "members": {
        "Action": {
          "documentation": "<p>Information about the activity described in a finding.</p>",
          "locationName": "action",
          "shape": "Action"
        },
        "Archived": {
          "documentation": "<p>Indicates whether this finding is archived.</p>",
          "locationName": "archived",
          "shape": "Boolean"
        },
        "Count": {
          "documentation": "<p>Total count of the occurrences of this finding type.</p>",
          "locationName": "count",
          "shape": "Integer"
        },
        "DetectorId": {
          "documentation": "<p>Detector ID for the GuardDuty service.</p>",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "EventFirstSeen": {
          "documentation": "<p>First seen timestamp of the activity that prompted GuardDuty to generate this finding.</p>",
          "locationName": "eventFirstSeen",
          "shape": "String"
        },
        "EventLastSeen": {
          "documentation": "<p>Last seen timestamp of the activity that prompted GuardDuty to generate this finding.</p>",
          "locationName": "eventLastSeen",
          "shape": "String"
        },
        "Evidence": {
          "documentation": "<p>An evidence object associated with the service.</p>",
          "locationName": "evidence",
          "shape": "Evidence"
        },
        "ResourceRole": {
          "documentation": "<p>Resource role information for this finding.</p>",
          "locationName": "resourceRole",
          "shape": "String"
        },
        "ServiceName": {
          "documentation": "<p>The name of the AWS service (GuardDuty) that generated a finding.</p>",
          "locationName": "serviceName",
          "shape": "String"
        },
        "UserFeedback": {
          "documentation": "<p>Feedback left about the finding.</p>",
          "locationName": "userFeedback",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "SortCriteria": {
      "documentation": "<p>Contains information about the criteria used for sorting findings.</p>",
      "members": {
        "AttributeName": {
          "documentation": "<p>Represents the finding attribute (for example, accountId) by which to sort findings.</p>",
          "locationName": "attributeName",
          "shape": "String"
        },
        "OrderBy": {
          "documentation": "<p>Order by which the sorted findings are to be displayed.</p>",
          "locationName": "orderBy",
          "shape": "OrderBy"
        }
      },
      "type": "structure"
    },
    "StartMonitoringMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts to start monitoring.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty master account associated with the member accounts to monitor.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "StartMonitoringMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "StopMonitoringMembersRequest": {
      "members": {
        "AccountIds": {
          "documentation": "<p>A list of account IDs of the GuardDuty member accounts whose findings you want the master account to stop monitoring.</p>",
          "locationName": "accountIds",
          "shape": "AccountIds"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector of the GuardDuty account that you want to stop from monitor members' findings.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "AccountIds"
      ],
      "type": "structure"
    },
    "StopMonitoringMembersResponse": {
      "members": {
        "UnprocessedAccounts": {
          "documentation": "<p>A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.</p>",
          "locationName": "unprocessedAccounts",
          "shape": "UnprocessedAccounts"
        }
      },
      "required": [
        "UnprocessedAccounts"
      ],
      "type": "structure"
    },
    "String": {
      "type": "string"
    },
    "Tag": {
      "documentation": "<p>Contains information about a tag associated with the Ec2 instance.</p>",
      "members": {
        "Key": {
          "documentation": "<p>EC2 instance tag key.</p>",
          "locationName": "key",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>EC2 instance tag value.</p>",
          "locationName": "value",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 200,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        },
        "Tags": {
          "documentation": "<p>The tags to be added to a resource.</p>",
          "locationName": "tags",
          "shape": "TagMap"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "type": "string"
    },
    "Tags": {
      "member": {
        "shape": "Tag"
      },
      "type": "list"
    },
    "ThreatIntelSetFormat": {
      "enum": [
        "TXT",
        "STIX",
        "OTX_CSV",
        "ALIEN_VAULT",
        "PROOF_POINT",
        "FIRE_EYE"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "ThreatIntelSetIds": {
      "max": 50,
      "member": {
        "shape": "String"
      },
      "min": 0,
      "type": "list"
    },
    "ThreatIntelSetStatus": {
      "enum": [
        "INACTIVE",
        "ACTIVATING",
        "ACTIVE",
        "DEACTIVATING",
        "ERROR",
        "DELETE_PENDING",
        "DELETED"
      ],
      "max": 300,
      "min": 1,
      "type": "string"
    },
    "ThreatIntelligenceDetail": {
      "documentation": "<p>An instance of a threat intelligence detail that constitutes evidence for the finding.</p>",
      "members": {
        "ThreatListName": {
          "documentation": "<p>The name of the threat intelligence list that triggered the finding.</p>",
          "locationName": "threatListName",
          "shape": "String"
        },
        "ThreatNames": {
          "documentation": "<p>A list of names of the threats in the threat intelligence list that triggered the finding.</p>",
          "locationName": "threatNames",
          "shape": "ThreatNames"
        }
      },
      "type": "structure"
    },
    "ThreatIntelligenceDetails": {
      "member": {
        "shape": "ThreatIntelligenceDetail"
      },
      "type": "list"
    },
    "ThreatNames": {
      "member": {
        "shape": "String"
      },
      "type": "list"
    },
    "UnarchiveFindingsRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The ID of the detector associated with the findings to unarchive.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FindingIds": {
          "documentation": "<p>IDs of the findings to unarchive.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds"
      ],
      "type": "structure"
    },
    "UnarchiveFindingsResponse": {
      "members": {},
      "type": "structure"
    },
    "UnprocessedAccount": {
      "documentation": "<p>Contains information about the accounts that were not processed.</p>",
      "members": {
        "AccountId": {
          "documentation": "<p>AWS Account ID.</p>",
          "locationName": "accountId",
          "shape": "AccountId"
        },
        "Result": {
          "documentation": "<p>A reason why the account hasn't been processed.</p>",
          "locationName": "result",
          "shape": "String"
        }
      },
      "required": [
        "AccountId",
        "Result"
      ],
      "type": "structure"
    },
    "UnprocessedAccounts": {
      "max": 50,
      "member": {
        "shape": "UnprocessedAccount"
      },
      "min": 0,
      "type": "list"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) for the resource to remove tags from.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "GuardDutyArn"
        },
        "TagKeys": {
          "documentation": "<p>The tag keys to remove from the resource.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateDetectorRequest": {
      "members": {
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Enable": {
          "documentation": "<p>Specifies whether the detector is enabled or not enabled.</p>",
          "locationName": "enable",
          "shape": "Boolean"
        },
        "FindingPublishingFrequency": {
          "documentation": "<p>A enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>",
          "locationName": "findingPublishingFrequency",
          "shape": "FindingPublishingFrequency"
        }
      },
      "required": [
        "DetectorId"
      ],
      "type": "structure"
    },
    "UpdateDetectorResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateFilterRequest": {
      "members": {
        "Action": {
          "documentation": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
          "locationName": "action",
          "shape": "FilterAction"
        },
        "Description": {
          "documentation": "<p>The description of the filter.</p>",
          "locationName": "description",
          "shape": "FilterDescription"
        },
        "DetectorId": {
          "documentation": "<p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "FilterName": {
          "documentation": "<p>The name of the filter.</p>",
          "location": "uri",
          "locationName": "filterName",
          "shape": "String"
        },
        "FindingCriteria": {
          "documentation": "<p>Represents the criteria to be used in the filter for querying findings.</p>",
          "locationName": "findingCriteria",
          "shape": "FindingCriteria"
        },
        "Rank": {
          "documentation": "<p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>",
          "locationName": "rank",
          "shape": "FilterRank"
        }
      },
      "required": [
        "DetectorId",
        "FilterName"
      ],
      "type": "structure"
    },
    "UpdateFilterResponse": {
      "members": {
        "Name": {
          "documentation": "<p>The name of the filter.</p>",
          "locationName": "name",
          "shape": "FilterName"
        }
      },
      "required": [
        "Name"
      ],
      "type": "structure"
    },
    "UpdateFindingsFeedbackRequest": {
      "members": {
        "Comments": {
          "documentation": "<p>Additional feedback about the GuardDuty findings.</p>",
          "locationName": "comments",
          "shape": "String"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the detector associated with the findings to update feedback for.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Feedback": {
          "documentation": "<p>The feedback for the finding.</p>",
          "locationName": "feedback",
          "shape": "Feedback"
        },
        "FindingIds": {
          "documentation": "<p>IDs of the findings that you want to mark as useful or not useful.</p>",
          "locationName": "findingIds",
          "shape": "FindingIds"
        }
      },
      "required": [
        "DetectorId",
        "FindingIds",
        "Feedback"
      ],
      "type": "structure"
    },
    "UpdateFindingsFeedbackResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateIPSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>The updated boolean value that specifies whether the IPSet is active or not.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "DetectorId": {
          "documentation": "<p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "IpSetId": {
          "documentation": "<p>The unique ID that specifies the IPSet that you want to update.</p>",
          "location": "uri",
          "locationName": "ipSetId",
          "shape": "String"
        },
        "Location": {
          "documentation": "<p>The updated URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The unique ID that specifies the IPSet that you want to update.</p>",
          "locationName": "name",
          "shape": "Name"
        }
      },
      "required": [
        "DetectorId",
        "IpSetId"
      ],
      "type": "structure"
    },
    "UpdateIPSetResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdatePublishingDestinationRequest": {
      "members": {
        "DestinationId": {
          "documentation": "<p>The ID of the detector associated with the publishing destinations to update.</p>",
          "location": "uri",
          "locationName": "destinationId",
          "shape": "String"
        },
        "DestinationProperties": {
          "documentation": "<p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>",
          "locationName": "destinationProperties",
          "shape": "DestinationProperties"
        },
        "DetectorId": {
          "documentation": "<p>The ID of the </p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        }
      },
      "required": [
        "DetectorId",
        "DestinationId"
      ],
      "type": "structure"
    },
    "UpdatePublishingDestinationResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateThreatIntelSetRequest": {
      "members": {
        "Activate": {
          "documentation": "<p>The updated boolean value that specifies whether the ThreateIntelSet is active or not.</p>",
          "locationName": "activate",
          "shape": "Boolean"
        },
        "DetectorId": {
          "documentation": "<p>The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.</p>",
          "location": "uri",
          "locationName": "detectorId",
          "shape": "DetectorId"
        },
        "Location": {
          "documentation": "<p>The updated URI of the file that contains the ThreateIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)</p>",
          "locationName": "location",
          "shape": "Location"
        },
        "Name": {
          "documentation": "<p>The unique ID that specifies the ThreatIntelSet that you want to update.</p>",
          "locationName": "name",
          "shape": "Name"
        },
        "ThreatIntelSetId": {
          "documentation": "<p>The unique ID that specifies the ThreatIntelSet that you want to update.</p>",
          "location": "uri",
          "locationName": "threatIntelSetId",
          "shape": "String"
        }
      },
      "required": [
        "DetectorId",
        "ThreatIntelSetId"
      ],
      "type": "structure"
    },
    "UpdateThreatIntelSetResponse": {
      "members": {},
      "type": "structure"
    }
  },
  "version": "2.0"
}
