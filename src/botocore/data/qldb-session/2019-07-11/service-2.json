{
  "documentation": "<p>The transactional data APIs for Amazon QLDB</p>",
  "metadata": {
    "apiVersion": "2019-07-11",
    "endpointPrefix": "session.qldb",
    "jsonVersion": "1.0",
    "protocol": "json",
    "serviceAbbreviation": "QLDB Session",
    "serviceFullName": "Amazon QLDB Session",
    "serviceId": "QLDB Session",
    "signatureVersion": "v4",
    "signingName": "qldb",
    "targetPrefix": "QLDBSession",
    "uid": "qldb-session-2019-07-11"
  },
  "operations": {
    "SendCommand": {
      "documentation": "<p>Sends a command to an Amazon QLDB ledger.</p>",
      "errors": [
        {
          "shape": "BadRequestException"
        },
        {
          "shape": "InvalidSessionException"
        },
        {
          "shape": "OccConflictException"
        },
        {
          "shape": "RateExceededException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/"
      },
      "input": {
        "shape": "SendCommandRequest"
      },
      "name": "SendCommand",
      "output": {
        "shape": "SendCommandResult"
      }
    }
  },
  "shapes": {
    "AbortTransactionRequest": {
      "documentation": "<p>Contains the details of the transaction to abort.</p>",
      "members": {},
      "type": "structure"
    },
    "AbortTransactionResult": {
      "documentation": "<p>Contains the details of the aborted transaction.</p>",
      "members": {},
      "type": "structure"
    },
    "BadRequestException": {
      "documentation": "<p>Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter.</p>",
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "CommitDigest": {
      "type": "blob"
    },
    "CommitTransactionRequest": {
      "documentation": "<p>Contains the details of the transaction to commit.</p>",
      "members": {
        "CommitDigest": {
          "documentation": "<p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p>",
          "shape": "CommitDigest"
        },
        "TransactionId": {
          "documentation": "<p>Specifies the transaction id of the transaction to commit.</p>",
          "shape": "TransactionId"
        }
      },
      "required": [
        "TransactionId",
        "CommitDigest"
      ],
      "type": "structure"
    },
    "CommitTransactionResult": {
      "documentation": "<p>Contains the details of the committed transaction.</p>",
      "members": {
        "CommitDigest": {
          "documentation": "<p>The commit digest of the committed transaction.</p>",
          "shape": "CommitDigest"
        },
        "TransactionId": {
          "documentation": "<p>The transaction id of the committed transaction.</p>",
          "shape": "TransactionId"
        }
      },
      "type": "structure"
    },
    "EndSessionRequest": {
      "documentation": "<p>Specifies a request to end the session.</p>",
      "members": {},
      "type": "structure"
    },
    "EndSessionResult": {
      "documentation": "<p>Contains the details of the ended session.</p>",
      "members": {},
      "type": "structure"
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "ExecuteStatementRequest": {
      "documentation": "<p>Specifies a request to execute a statement.</p>",
      "members": {
        "Parameters": {
          "documentation": "<p>Specifies the parameters for the parameterized statement in the request.</p>",
          "shape": "StatementParameters"
        },
        "Statement": {
          "documentation": "<p>Specifies the statement of the request.</p>",
          "shape": "Statement"
        },
        "TransactionId": {
          "documentation": "<p>Specifies the transaction id of the request.</p>",
          "shape": "TransactionId"
        }
      },
      "required": [
        "TransactionId",
        "Statement"
      ],
      "type": "structure"
    },
    "ExecuteStatementResult": {
      "documentation": "<p>Contains the details of the executed statement.</p>",
      "members": {
        "FirstPage": {
          "documentation": "<p>Contains the details of the first fetched page.</p>",
          "shape": "Page"
        }
      },
      "type": "structure"
    },
    "FetchPageRequest": {
      "documentation": "<p>Specifies the details of the page to be fetched.</p>",
      "members": {
        "NextPageToken": {
          "documentation": "<p>Specifies the next page token of the page to be fetched.</p>",
          "shape": "PageToken"
        },
        "TransactionId": {
          "documentation": "<p>Specifies the transaction id of the page to be fetched.</p>",
          "shape": "TransactionId"
        }
      },
      "required": [
        "TransactionId",
        "NextPageToken"
      ],
      "type": "structure"
    },
    "FetchPageResult": {
      "documentation": "<p>Contains the page that was fetched.</p>",
      "members": {
        "Page": {
          "documentation": "<p>Contains details of the fetched page.</p>",
          "shape": "Page"
        }
      },
      "type": "structure"
    },
    "InvalidSessionException": {
      "documentation": "<p>Returned if the session doesn't exist anymore because it timed-out or expired.</p>",
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "IonBinary": {
      "max": 131072,
      "min": 1,
      "type": "blob"
    },
    "IonText": {
      "max": 1048576,
      "min": 1,
      "type": "string"
    },
    "LedgerName": {
      "max": 32,
      "min": 1,
      "pattern": "(?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$",
      "type": "string"
    },
    "LimitExceededException": {
      "documentation": "<p>Returned if a resource limit such as number of active sessions is exceeded.</p>",
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "OccConflictException": {
      "documentation": "<p>Returned when a transaction cannot be written to the journal due to a failure in the verification phase of Optimistic Concurrency Control.</p>",
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Page": {
      "documentation": "<p>Contains details of the fetched page.</p>",
      "members": {
        "NextPageToken": {
          "documentation": "<p>The token of the next page.</p>",
          "shape": "PageToken"
        },
        "Values": {
          "documentation": "<p>A structure that contains values in multiple encoding formats.</p>",
          "shape": "ValueHolders"
        }
      },
      "type": "structure"
    },
    "PageToken": {
      "max": 1024,
      "min": 4,
      "pattern": "^[A-Za-z-0-9+/=]+$",
      "type": "string"
    },
    "RateExceededException": {
      "documentation": "<p>Returned when the rate of requests exceeds the allowed throughput.</p>",
      "exception": true,
      "members": {
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "SendCommandRequest": {
      "members": {
        "AbortTransaction": {
          "documentation": "<p>Command to abort the current transaction.</p>",
          "shape": "AbortTransactionRequest"
        },
        "CommitTransaction": {
          "documentation": "<p>Command to commit the specified transaction.</p>",
          "shape": "CommitTransactionRequest"
        },
        "EndSession": {
          "documentation": "<p>Command to end the current session.</p>",
          "shape": "EndSessionRequest"
        },
        "ExecuteStatement": {
          "documentation": "<p>Command to execute a statement in the specified transaction.</p>",
          "shape": "ExecuteStatementRequest"
        },
        "FetchPage": {
          "documentation": "<p>Command to fetch a page.</p>",
          "shape": "FetchPageRequest"
        },
        "SessionToken": {
          "documentation": "<p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p> <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>",
          "shape": "SessionToken"
        },
        "StartSession": {
          "documentation": "<p>Command to start a new session. A session token is obtained as part of the response.</p>",
          "shape": "StartSessionRequest"
        },
        "StartTransaction": {
          "documentation": "<p>Command to start a new transaction.</p>",
          "shape": "StartTransactionRequest"
        }
      },
      "type": "structure"
    },
    "SendCommandResult": {
      "members": {
        "AbortTransaction": {
          "documentation": "<p>Contains the details of the aborted transaction.</p>",
          "shape": "AbortTransactionResult"
        },
        "CommitTransaction": {
          "documentation": "<p>Contains the details of the committed transaction.</p>",
          "shape": "CommitTransactionResult"
        },
        "EndSession": {
          "documentation": "<p>Contains the details of the ended session.</p>",
          "shape": "EndSessionResult"
        },
        "ExecuteStatement": {
          "documentation": "<p>Contains the details of the executed statement.</p>",
          "shape": "ExecuteStatementResult"
        },
        "FetchPage": {
          "documentation": "<p>Contains the details of the fetched page.</p>",
          "shape": "FetchPageResult"
        },
        "StartSession": {
          "documentation": "<p>Contains the details of the started session that includes a session token. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>",
          "shape": "StartSessionResult"
        },
        "StartTransaction": {
          "documentation": "<p>Contains the details of the started transaction.</p>",
          "shape": "StartTransactionResult"
        }
      },
      "type": "structure"
    },
    "SessionToken": {
      "max": 1024,
      "min": 4,
      "pattern": "^[A-Za-z-0-9+/=]+$",
      "type": "string"
    },
    "StartSessionRequest": {
      "documentation": "<p>Specifies a request to start a a new session.</p>",
      "members": {
        "LedgerName": {
          "documentation": "<p>The name of the ledger to start a new session against.</p>",
          "shape": "LedgerName"
        }
      },
      "required": [
        "LedgerName"
      ],
      "type": "structure"
    },
    "StartSessionResult": {
      "documentation": "<p>Contains the details of the started session.</p>",
      "members": {
        "SessionToken": {
          "documentation": "<p>Session token of the started session. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>",
          "shape": "SessionToken"
        }
      },
      "type": "structure"
    },
    "StartTransactionRequest": {
      "documentation": "<p>Specifies a request to start a transaction.</p>",
      "members": {},
      "type": "structure"
    },
    "StartTransactionResult": {
      "documentation": "<p>Contains the details of the started transaction.</p>",
      "members": {
        "TransactionId": {
          "documentation": "<p>The transaction id of the started transaction.</p>",
          "shape": "TransactionId"
        }
      },
      "type": "structure"
    },
    "Statement": {
      "max": 100000,
      "min": 1,
      "type": "string"
    },
    "StatementParameters": {
      "member": {
        "shape": "ValueHolder"
      },
      "type": "list"
    },
    "TransactionId": {
      "max": 22,
      "min": 22,
      "pattern": "^[A-Za-z-0-9]+$",
      "type": "string"
    },
    "ValueHolder": {
      "documentation": "<p>A structure that can contains values in multiple encoding formats.</p>",
      "members": {
        "IonBinary": {
          "documentation": "<p>An Amazon Ion binary value contained in a <code>ValueHolder</code> structure. </p>",
          "shape": "IonBinary"
        },
        "IonText": {
          "documentation": "<p>An Amazon Ion plaintext value contained in a <code>ValueHolder</code> structure. </p>",
          "shape": "IonText"
        }
      },
      "type": "structure"
    },
    "ValueHolders": {
      "member": {
        "shape": "ValueHolder"
      },
      "type": "list"
    }
  },
  "version": "2.0"
}
