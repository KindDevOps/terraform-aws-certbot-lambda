{
  "documentation": "<fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your AWS resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon DLM supports Amazon EBS volumes and snapshots. For information about using Amazon DLM with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\">Automating the Amazon EBS Snapshot Lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>",
  "metadata": {
    "apiVersion": "2018-01-12",
    "endpointPrefix": "dlm",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon DLM",
    "serviceFullName": "Amazon Data Lifecycle Manager",
    "serviceId": "DLM",
    "signatureVersion": "v4",
    "signingName": "dlm",
    "uid": "dlm-2018-01-12"
  },
  "operations": {
    "CreateLifecyclePolicy": {
      "documentation": "<p>Creates a policy to manage the lifecycle of the specified AWS resources. You can create up to 100 lifecycle policies.</p>",
      "errors": [
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "LimitExceededException"
        },
        {
          "shape": "InternalServerException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/policies"
      },
      "input": {
        "shape": "CreateLifecyclePolicyRequest"
      },
      "name": "CreateLifecyclePolicy",
      "output": {
        "shape": "CreateLifecyclePolicyResponse"
      }
    },
    "DeleteLifecyclePolicy": {
      "documentation": "<p>Deletes the specified lifecycle policy and halts the automated operations that the policy specified.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/policies/{policyId}/"
      },
      "input": {
        "shape": "DeleteLifecyclePolicyRequest"
      },
      "name": "DeleteLifecyclePolicy",
      "output": {
        "shape": "DeleteLifecyclePolicyResponse"
      }
    },
    "GetLifecyclePolicies": {
      "documentation": "<p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/policies"
      },
      "input": {
        "shape": "GetLifecyclePoliciesRequest"
      },
      "name": "GetLifecyclePolicies",
      "output": {
        "shape": "GetLifecyclePoliciesResponse"
      }
    },
    "GetLifecyclePolicy": {
      "documentation": "<p>Gets detailed information about the specified lifecycle policy.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/policies/{policyId}/"
      },
      "input": {
        "shape": "GetLifecyclePolicyRequest"
      },
      "name": "GetLifecyclePolicy",
      "output": {
        "shape": "GetLifecyclePolicyResponse"
      }
    },
    "ListTagsForResource": {
      "documentation": "<p>Lists the tags for the specified resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "GET",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "ListTagsForResourceRequest"
      },
      "name": "ListTagsForResource",
      "output": {
        "shape": "ListTagsForResourceResponse"
      }
    },
    "TagResource": {
      "documentation": "<p>Adds the specified tags to the specified resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "POST",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "TagResourceRequest"
      },
      "name": "TagResource",
      "output": {
        "shape": "TagResourceResponse"
      }
    },
    "UntagResource": {
      "documentation": "<p>Removes the specified tags from the specified resource.</p>",
      "errors": [
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "ResourceNotFoundException"
        }
      ],
      "http": {
        "method": "DELETE",
        "requestUri": "/tags/{resourceArn}"
      },
      "input": {
        "shape": "UntagResourceRequest"
      },
      "name": "UntagResource",
      "output": {
        "shape": "UntagResourceResponse"
      }
    },
    "UpdateLifecyclePolicy": {
      "documentation": "<p>Updates the specified lifecycle policy.</p>",
      "errors": [
        {
          "shape": "ResourceNotFoundException"
        },
        {
          "shape": "InvalidRequestException"
        },
        {
          "shape": "InternalServerException"
        },
        {
          "shape": "LimitExceededException"
        }
      ],
      "http": {
        "method": "PATCH",
        "requestUri": "/policies/{policyId}"
      },
      "input": {
        "shape": "UpdateLifecyclePolicyRequest"
      },
      "name": "UpdateLifecyclePolicy",
      "output": {
        "shape": "UpdateLifecyclePolicyResponse"
      }
    }
  },
  "shapes": {
    "AvailabilityZone": {
      "max": 16,
      "min": 0,
      "pattern": "([a-z]+-){2,3}\\d[a-z]",
      "type": "string"
    },
    "AvailabilityZoneList": {
      "max": 10,
      "member": {
        "shape": "AvailabilityZone"
      },
      "min": 1,
      "type": "list"
    },
    "CmkArn": {
      "max": 2048,
      "min": 0,
      "pattern": "arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\\d:\\d+:key/.*",
      "type": "string"
    },
    "CopyTags": {
      "type": "boolean"
    },
    "CopyTagsNullable": {
      "type": "boolean"
    },
    "Count": {
      "max": 1000,
      "min": 1,
      "type": "integer"
    },
    "CreateLifecyclePolicyRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.</p>",
          "shape": "PolicyDescription"
        },
        "ExecutionRoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>",
          "shape": "ExecutionRoleArn"
        },
        "PolicyDetails": {
          "documentation": "<p>The configuration details of the lifecycle policy.</p>",
          "shape": "PolicyDetails"
        },
        "State": {
          "documentation": "<p>The desired activation state of the lifecycle policy after creation.</p>",
          "shape": "SettablePolicyStateValues"
        },
        "Tags": {
          "documentation": "<p>The tags to apply to the lifecycle policy during creation.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "ExecutionRoleArn",
        "Description",
        "State",
        "PolicyDetails"
      ],
      "type": "structure"
    },
    "CreateLifecyclePolicyResponse": {
      "members": {
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "shape": "PolicyId"
        }
      },
      "type": "structure"
    },
    "CreateRule": {
      "documentation": "<p>Specifies when to create snapshots of EBS volumes.</p>",
      "members": {
        "Interval": {
          "documentation": "<p>The interval between snapshots. The supported values are 2, 3, 4, 6, 8, 12, and 24.</p>",
          "shape": "Interval"
        },
        "IntervalUnit": {
          "documentation": "<p>The interval unit.</p>",
          "shape": "IntervalUnitValues"
        },
        "Times": {
          "documentation": "<p>The time, in UTC, to start the operation. The supported format is hh:mm.</p> <p>The operation occurs within a one-hour window following the specified time.</p>",
          "shape": "TimesList"
        }
      },
      "required": [
        "Interval",
        "IntervalUnit"
      ],
      "type": "structure"
    },
    "CrossRegionCopyRetainRule": {
      "documentation": "<p>Specifies the retention rule for cross-Region snapshot copies.</p>",
      "members": {
        "Interval": {
          "documentation": "<p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>",
          "shape": "Interval"
        },
        "IntervalUnit": {
          "documentation": "<p>The unit of time for time-based retention.</p>",
          "shape": "RetentionIntervalUnitValues"
        }
      },
      "type": "structure"
    },
    "CrossRegionCopyRule": {
      "documentation": "<p>Specifies a rule for cross-Region snapshot copies.</p>",
      "members": {
        "CmkArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the AWS KMS customer master key (CMK) to use for EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used.</p>",
          "shape": "CmkArn"
        },
        "CopyTags": {
          "documentation": "<p>Copy all user-defined tags from the source snapshot to the copied snapshot.</p>",
          "shape": "CopyTagsNullable"
        },
        "Encrypted": {
          "documentation": "<p>To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or if encryption by default is not enabled.</p>",
          "shape": "Encrypted"
        },
        "RetainRule": {
          "documentation": "<p>The retention rule.</p>",
          "shape": "CrossRegionCopyRetainRule"
        },
        "TargetRegion": {
          "documentation": "<p>The target Region.</p>",
          "shape": "TargetRegion"
        }
      },
      "required": [
        "TargetRegion",
        "Encrypted"
      ],
      "type": "structure"
    },
    "CrossRegionCopyRules": {
      "max": 3,
      "member": {
        "shape": "CrossRegionCopyRule"
      },
      "min": 0,
      "type": "list"
    },
    "DeleteLifecyclePolicyRequest": {
      "members": {
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "location": "uri",
          "locationName": "policyId",
          "shape": "PolicyId"
        }
      },
      "required": [
        "PolicyId"
      ],
      "type": "structure"
    },
    "DeleteLifecyclePolicyResponse": {
      "members": {},
      "type": "structure"
    },
    "Encrypted": {
      "type": "boolean"
    },
    "ErrorCode": {
      "type": "string"
    },
    "ErrorMessage": {
      "type": "string"
    },
    "ExcludeBootVolume": {
      "type": "boolean"
    },
    "ExecutionRoleArn": {
      "max": 2048,
      "min": 0,
      "pattern": "arn:aws(-[a-z]{1,3}){0,2}:iam::\\d+:role/.*",
      "type": "string"
    },
    "FastRestoreRule": {
      "documentation": "<p>Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot restore based on either a count or a time interval.</p>",
      "members": {
        "AvailabilityZones": {
          "documentation": "<p>The Availability Zones in which to enable fast snapshot restore.</p>",
          "shape": "AvailabilityZoneList"
        },
        "Count": {
          "documentation": "<p>The number of snapshots to be enabled with fast snapshot restore.</p>",
          "shape": "Count"
        },
        "Interval": {
          "documentation": "<p>The amount of time to enable fast snapshot restore. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>",
          "shape": "Interval"
        },
        "IntervalUnit": {
          "documentation": "<p>The unit of time for enabling fast snapshot restore.</p>",
          "shape": "RetentionIntervalUnitValues"
        }
      },
      "required": [
        "AvailabilityZones"
      ],
      "type": "structure"
    },
    "GetLifecyclePoliciesRequest": {
      "members": {
        "PolicyIds": {
          "documentation": "<p>The identifiers of the data lifecycle policies.</p>",
          "location": "querystring",
          "locationName": "policyIds",
          "shape": "PolicyIdList"
        },
        "ResourceTypes": {
          "documentation": "<p>The resource type.</p>",
          "location": "querystring",
          "locationName": "resourceTypes",
          "shape": "ResourceTypeValuesList"
        },
        "State": {
          "documentation": "<p>The activation state.</p>",
          "location": "querystring",
          "locationName": "state",
          "shape": "GettablePolicyStateValues"
        },
        "TagsToAdd": {
          "documentation": "<p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the AWS-added lifecycle tags.</p>",
          "location": "querystring",
          "locationName": "tagsToAdd",
          "shape": "TagsToAddFilterList"
        },
        "TargetTags": {
          "documentation": "<p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>",
          "location": "querystring",
          "locationName": "targetTags",
          "shape": "TargetTagsFilterList"
        }
      },
      "type": "structure"
    },
    "GetLifecyclePoliciesResponse": {
      "members": {
        "Policies": {
          "documentation": "<p>Summary information about the lifecycle policies.</p>",
          "shape": "LifecyclePolicySummaryList"
        }
      },
      "type": "structure"
    },
    "GetLifecyclePolicyRequest": {
      "members": {
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "location": "uri",
          "locationName": "policyId",
          "shape": "PolicyId"
        }
      },
      "required": [
        "PolicyId"
      ],
      "type": "structure"
    },
    "GetLifecyclePolicyResponse": {
      "members": {
        "Policy": {
          "documentation": "<p>Detailed information about the lifecycle policy.</p>",
          "shape": "LifecyclePolicy"
        }
      },
      "type": "structure"
    },
    "GettablePolicyStateValues": {
      "enum": [
        "ENABLED",
        "DISABLED",
        "ERROR"
      ],
      "type": "string"
    },
    "InternalServerException": {
      "documentation": "<p>The service failed in an unexpected way.</p>",
      "error": {
        "httpStatusCode": 500
      },
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        }
      },
      "type": "structure"
    },
    "Interval": {
      "min": 1,
      "type": "integer"
    },
    "IntervalUnitValues": {
      "enum": [
        "HOURS"
      ],
      "type": "string"
    },
    "InvalidRequestException": {
      "documentation": "<p>Bad request. The request is missing required parameters or has invalid parameters.</p>",
      "error": {
        "httpStatusCode": 400
      },
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        },
        "MutuallyExclusiveParameters": {
          "documentation": "<p>The request included parameters that cannot be provided together.</p>",
          "shape": "ParameterList"
        },
        "RequiredParameters": {
          "documentation": "<p>The request omitted one or more required parameters.</p>",
          "shape": "ParameterList"
        }
      },
      "type": "structure"
    },
    "LifecyclePolicy": {
      "documentation": "<p>Detailed information about a lifecycle policy.</p>",
      "members": {
        "DateCreated": {
          "documentation": "<p>The local date and time when the lifecycle policy was created.</p>",
          "shape": "Timestamp"
        },
        "DateModified": {
          "documentation": "<p>The local date and time when the lifecycle policy was last modified.</p>",
          "shape": "Timestamp"
        },
        "Description": {
          "documentation": "<p>The description of the lifecycle policy.</p>",
          "shape": "PolicyDescription"
        },
        "ExecutionRoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>",
          "shape": "ExecutionRoleArn"
        },
        "PolicyArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the policy.</p>",
          "shape": "PolicyArn"
        },
        "PolicyDetails": {
          "documentation": "<p>The configuration of the lifecycle policy</p>",
          "shape": "PolicyDetails"
        },
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "shape": "PolicyId"
        },
        "State": {
          "documentation": "<p>The activation state of the lifecycle policy.</p>",
          "shape": "GettablePolicyStateValues"
        },
        "StatusMessage": {
          "documentation": "<p>The description of the status.</p>",
          "shape": "StatusMessage"
        },
        "Tags": {
          "documentation": "<p>The tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "LifecyclePolicySummary": {
      "documentation": "<p>Summary information about a lifecycle policy.</p>",
      "members": {
        "Description": {
          "documentation": "<p>The description of the lifecycle policy.</p>",
          "shape": "PolicyDescription"
        },
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "shape": "PolicyId"
        },
        "State": {
          "documentation": "<p>The activation state of the lifecycle policy.</p>",
          "shape": "GettablePolicyStateValues"
        },
        "Tags": {
          "documentation": "<p>The tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "LifecyclePolicySummaryList": {
      "member": {
        "shape": "LifecyclePolicySummary"
      },
      "type": "list"
    },
    "LimitExceededException": {
      "documentation": "<p>The request failed because a limit was exceeded.</p>",
      "error": {
        "httpStatusCode": 429
      },
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        },
        "ResourceType": {
          "documentation": "<p>Value is the type of resource for which a limit was exceeded.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ListTagsForResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "PolicyArn"
        }
      },
      "required": [
        "ResourceArn"
      ],
      "type": "structure"
    },
    "ListTagsForResourceResponse": {
      "members": {
        "Tags": {
          "documentation": "<p>Information about the tags.</p>",
          "shape": "TagMap"
        }
      },
      "type": "structure"
    },
    "Parameter": {
      "type": "string"
    },
    "ParameterList": {
      "member": {
        "shape": "Parameter"
      },
      "type": "list"
    },
    "Parameters": {
      "documentation": "<p>Specifies optional parameters to add to a policy. The set of valid parameters depends on the combination of policy type and resource type.</p>",
      "members": {
        "ExcludeBootVolume": {
          "documentation": "<p>[EBS Snapshot Management \u2013 Instance policies only] Indicates whether to exclude the root volume from snapshots created using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSnapshots.html\">CreateSnapshots</a>. The default is false.</p>",
          "shape": "ExcludeBootVolume"
        }
      },
      "type": "structure"
    },
    "PolicyArn": {
      "max": 2048,
      "min": 0,
      "pattern": "^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\\d+:policy/[0-9A-Za-z_-]{1,128}$",
      "type": "string"
    },
    "PolicyDescription": {
      "max": 500,
      "min": 0,
      "pattern": "[0-9A-Za-z _-]+",
      "type": "string"
    },
    "PolicyDetails": {
      "documentation": "<p>Specifies the configuration of a lifecycle policy.</p>",
      "members": {
        "Parameters": {
          "documentation": "<p>A set of optional parameters for the policy. </p>",
          "shape": "Parameters"
        },
        "PolicyType": {
          "documentation": "<p>The valid target resource types and actions a policy can manage. The default is EBS_SNAPSHOT_MANAGEMENT.</p>",
          "shape": "PolicyTypeValues"
        },
        "ResourceTypes": {
          "documentation": "<p>The resource type.</p>",
          "shape": "ResourceTypeValuesList"
        },
        "Schedules": {
          "documentation": "<p>The schedule of policy-defined actions.</p>",
          "shape": "ScheduleList"
        },
        "TargetTags": {
          "documentation": "<p>The single tag that identifies targeted resources for this policy.</p>",
          "shape": "TargetTagList"
        }
      },
      "type": "structure"
    },
    "PolicyId": {
      "max": 64,
      "min": 0,
      "pattern": "policy-[A-Za-z0-9]+",
      "type": "string"
    },
    "PolicyIdList": {
      "member": {
        "shape": "PolicyId"
      },
      "type": "list"
    },
    "PolicyTypeValues": {
      "enum": [
        "EBS_SNAPSHOT_MANAGEMENT"
      ],
      "type": "string"
    },
    "ResourceNotFoundException": {
      "documentation": "<p>A requested resource was not found.</p>",
      "error": {
        "httpStatusCode": 404
      },
      "exception": true,
      "members": {
        "Code": {
          "shape": "ErrorCode"
        },
        "Message": {
          "shape": "ErrorMessage"
        },
        "ResourceIds": {
          "documentation": "<p>Value is a list of resource IDs that were not found.</p>",
          "shape": "PolicyIdList"
        },
        "ResourceType": {
          "documentation": "<p>Value is the type of resource that was not found.</p>",
          "shape": "String"
        }
      },
      "type": "structure"
    },
    "ResourceTypeValues": {
      "enum": [
        "VOLUME",
        "INSTANCE"
      ],
      "type": "string"
    },
    "ResourceTypeValuesList": {
      "max": 1,
      "member": {
        "shape": "ResourceTypeValues"
      },
      "min": 1,
      "type": "list"
    },
    "RetainRule": {
      "documentation": "<p>Specifies the retention rule for a lifecycle policy. You can retain snapshots based on either a count or a time interval.</p>",
      "members": {
        "Count": {
          "documentation": "<p>The number of snapshots to retain for each volume, up to a maximum of 1000.</p>",
          "shape": "Count"
        },
        "Interval": {
          "documentation": "<p>The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.</p>",
          "shape": "Interval"
        },
        "IntervalUnit": {
          "documentation": "<p>The unit of time for time-based retention.</p>",
          "shape": "RetentionIntervalUnitValues"
        }
      },
      "type": "structure"
    },
    "RetentionIntervalUnitValues": {
      "enum": [
        "DAYS",
        "WEEKS",
        "MONTHS",
        "YEARS"
      ],
      "type": "string"
    },
    "Schedule": {
      "documentation": "<p>Specifies a backup schedule.</p>",
      "members": {
        "CopyTags": {
          "documentation": "<p>Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.</p>",
          "shape": "CopyTags"
        },
        "CreateRule": {
          "documentation": "<p>The creation rule.</p>",
          "shape": "CreateRule"
        },
        "CrossRegionCopyRules": {
          "documentation": "<p>The rule for cross-Region snapshot copies.</p>",
          "shape": "CrossRegionCopyRules"
        },
        "FastRestoreRule": {
          "documentation": "<p>The rule for enabling fast snapshot restore.</p>",
          "shape": "FastRestoreRule"
        },
        "Name": {
          "documentation": "<p>The name of the schedule.</p>",
          "shape": "ScheduleName"
        },
        "RetainRule": {
          "documentation": "<p>The retention rule.</p>",
          "shape": "RetainRule"
        },
        "TagsToAdd": {
          "documentation": "<p>The tags to apply to policy-created resources. These user-defined tags are in addition to the AWS-added lifecycle tags.</p>",
          "shape": "TagsToAddList"
        },
        "VariableTags": {
          "documentation": "<p>A collection of key/value pairs with values determined dynamically when the policy is executed. Keys may be any valid Amazon EC2 tag key. Values must be in one of the two following formats: <code>$(instance-id)</code> or <code>$(timestamp)</code>. Variable tags are only valid for EBS Snapshot Management \u2013 Instance policies.</p>",
          "shape": "VariableTagsList"
        }
      },
      "type": "structure"
    },
    "ScheduleList": {
      "max": 1,
      "member": {
        "shape": "Schedule"
      },
      "min": 1,
      "type": "list"
    },
    "ScheduleName": {
      "max": 500,
      "min": 0,
      "pattern": "[\\p{all}]*",
      "type": "string"
    },
    "SettablePolicyStateValues": {
      "enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string"
    },
    "StatusMessage": {
      "max": 500,
      "min": 0,
      "pattern": "[\\p{all}]*",
      "type": "string"
    },
    "String": {
      "max": 500,
      "min": 0,
      "pattern": "[\\p{all}]*",
      "type": "string"
    },
    "Tag": {
      "documentation": "<p>Specifies a tag for a resource.</p>",
      "members": {
        "Key": {
          "documentation": "<p>The tag key.</p>",
          "shape": "String"
        },
        "Value": {
          "documentation": "<p>The tag value.</p>",
          "shape": "String"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "type": "structure"
    },
    "TagFilter": {
      "max": 256,
      "min": 0,
      "pattern": "[\\p{all}]*",
      "type": "string"
    },
    "TagKey": {
      "max": 128,
      "min": 1,
      "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
      "type": "string"
    },
    "TagKeyList": {
      "max": 200,
      "member": {
        "shape": "TagKey"
      },
      "min": 1,
      "type": "list"
    },
    "TagMap": {
      "key": {
        "shape": "TagKey"
      },
      "max": 200,
      "min": 1,
      "type": "map",
      "value": {
        "shape": "TagValue"
      }
    },
    "TagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "PolicyArn"
        },
        "Tags": {
          "documentation": "<p>One or more tags.</p>",
          "shape": "TagMap"
        }
      },
      "required": [
        "ResourceArn",
        "Tags"
      ],
      "type": "structure"
    },
    "TagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "TagValue": {
      "max": 256,
      "pattern": "[\\p{all}]*",
      "type": "string"
    },
    "TagsToAddFilterList": {
      "max": 50,
      "member": {
        "shape": "TagFilter"
      },
      "min": 0,
      "type": "list"
    },
    "TagsToAddList": {
      "max": 45,
      "member": {
        "shape": "Tag"
      },
      "min": 0,
      "type": "list"
    },
    "TargetRegion": {
      "max": 16,
      "min": 0,
      "pattern": "([a-z]+-){2,3}\\d",
      "type": "string"
    },
    "TargetTagList": {
      "max": 50,
      "member": {
        "shape": "Tag"
      },
      "min": 1,
      "type": "list"
    },
    "TargetTagsFilterList": {
      "max": 50,
      "member": {
        "shape": "TagFilter"
      },
      "min": 1,
      "type": "list"
    },
    "Time": {
      "max": 5,
      "min": 5,
      "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
      "type": "string"
    },
    "TimesList": {
      "max": 1,
      "member": {
        "shape": "Time"
      },
      "type": "list"
    },
    "Timestamp": {
      "timestampFormat": "iso8601",
      "type": "timestamp"
    },
    "UntagResourceRequest": {
      "members": {
        "ResourceArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the resource.</p>",
          "location": "uri",
          "locationName": "resourceArn",
          "shape": "PolicyArn"
        },
        "TagKeys": {
          "documentation": "<p>The tag keys.</p>",
          "location": "querystring",
          "locationName": "tagKeys",
          "shape": "TagKeyList"
        }
      },
      "required": [
        "ResourceArn",
        "TagKeys"
      ],
      "type": "structure"
    },
    "UntagResourceResponse": {
      "members": {},
      "type": "structure"
    },
    "UpdateLifecyclePolicyRequest": {
      "members": {
        "Description": {
          "documentation": "<p>A description of the lifecycle policy.</p>",
          "shape": "PolicyDescription"
        },
        "ExecutionRoleArn": {
          "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.</p>",
          "shape": "ExecutionRoleArn"
        },
        "PolicyDetails": {
          "documentation": "<p>The configuration of the lifecycle policy. You cannot update the policy type or the resource type.</p>",
          "shape": "PolicyDetails"
        },
        "PolicyId": {
          "documentation": "<p>The identifier of the lifecycle policy.</p>",
          "location": "uri",
          "locationName": "policyId",
          "shape": "PolicyId"
        },
        "State": {
          "documentation": "<p>The desired activation state of the lifecycle policy after creation.</p>",
          "shape": "SettablePolicyStateValues"
        }
      },
      "required": [
        "PolicyId"
      ],
      "type": "structure"
    },
    "UpdateLifecyclePolicyResponse": {
      "members": {},
      "type": "structure"
    },
    "VariableTagsList": {
      "max": 45,
      "member": {
        "shape": "Tag"
      },
      "min": 0,
      "type": "list"
    }
  },
  "version": "2.0"
}
